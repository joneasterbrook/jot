#! /bin/csh -f
#Compiles nominated editor module then links.
#Use this script for debugging - it will work with gdb and use makejot to make
#the final executable - the spro-generated version does not suffer from 
#random crashes.
#
# Valid usage:
#  ced [-backup <backupFileName>][ -newversion [<versionString>]][ -oldversion <versionString>][ -notest][ -tostick][ -fromstick][ -newstick]
#    -backup <fileName>  - compiles specified jot.c from backup area, must be of the form jot.c_<dateStamp>
#    -newversion [v<digits>] - Creates and populates next [or specified] version subdirectory then compiles the new release.
#    -oldversion <version> - Compiles a version already copied to a version subtree.
#    -nolin - skips compilation and test of linux version.
#    -nowin - skips compilation of windows version.
#    -noand - skips compilation of android version.
#    -notest - skips test after compile.
#    -tostick Archives selected files on a USB memory stick.
#    -fromstick extracts selected files from an archive on a USB memory stick.
#    -newstick creates the directory structure on a new memory stick.
#
#  Examples:
#    ced                            - simple recompile jotfor linux and windows, executables are named jot_dev[.exe].
#    ced -backup jot.c_130828_1805  - compiles ~/ed/source/backup/jot.c_130828_1805, execurables are named jot_<suffix>[.exe]
#    ced -newversion                - creates the next version up from current top version, populates it and compiles the sources..
#    ced -newversion v1.99          - creates v1.99 release subdir, populates it and compiles the sources.
#    ced -oldversion v1.1           - makes executables from the source in v1.1

set sourceDir="source/"
set versionDir=""
set backup="" 
set exeSuffix="_dev"
set version=""
set newVersion=""
set notest = ""
set nowin = ""
set noand = ""
set nolin = ""
 
while("$1" != "") 
  if("${1}" == "-backup") then
    shift
    set backup=$1
    set exeSuffix=`echo ${backup} | sed s/jot.c_/_/`
echo "exeSuffix changed to ${exeSuffix}"
    shift

  else if("$1" == "-notest") then
    set notest = "notest"
    shift
   
  else if("$1" == "-nowin") then
    set nowin = "nowin"
    shift
   
  else if("$1" == "-noand") then
    set noand = "noand"
    shift
   
  else if("$1" == "-nolin") then
    set nolin = "nolin"
    shift
   
  else if("$1" == "-oldversion") then
    shift
    set version="$1"
    shift
    set sourceDir="release/$version/source/"
    set versionDir="release/$version/"
    if( ! -d $sourceDir) then
      echo "Directory $sourceDir does not exist - exiting now."
      exit 1
      endif
    if( ! -d $versionDir/coms) then
      echo "Directory $versionDir/coms does not exist - exiting now."
      exit 1
      endif
    if( ! -d $versionDir/docs) then
      echo "Directory $versionDir/docs does not exist - exiting now."
      exit 1
      endif

  else if("$1" == "-newstick") then
    #Initialize a new memory stick.
    cd ~/ed
    if( -d "/media") then 
      if(`\ls /media/ | \wc -l` == "0") then
        if(`\ls /var/run/media/${USER}/ | \wc -l` == "0") then
          echo "No devices in /media or /var/run/media/${USER} - cannot proceed"
          exit 1
        else
          set stick=/var/run/media/${USER}/`\ls /var/run/media/${USER}`
          echo "stick set to $stick"
        endif
      else
        set stick=/media/`\ls /media`
        endif
      if(`echo $stick | \wc -w` != "1") then
        echo "more than one device in /media - cannot proceed"
        exit 1
        endif
    else
      set stick=/cygdrive/k
    endif
    \chmod -R u+w $stick
    mkdir ${stick}/ed
    mkdir ${stick}/ed/source
    mkdir ${stick}/ed/source/backup
    mkdir ${stick}/ed/docs
    mkdir ${stick}/ed/docs/backup
    mkdir ${stick}/ed/resources
    mkdir ${stick}/ed/backup
    mkdir ${stick}/ed/coms
    mkdir ${stick}/ed/coms/backup
    mkdir ${stick}/ed/bin/
    mkdir ${stick}/ed/bin/lin32/
    mkdir ${stick}/ed/bin/lin64/
    mkdir ${stick}/ed/bin/win32/
    mkdir ${stick}/work
    mkdir ${stick}/bin/
    exit 0

  else if("$1" == "-tostick") then
    #Upload to memory stick.
    cd ~/ed
    if( -d "/media") then 
      if(`\ls /media/ | \wc -l` == "0") then
        if(`\ls /var/run/media/${USER}/ | \wc -l` == "0") then
          echo "No devices in /media or /var/run/media/${USER} - cannot proceed"
          exit 1
        else
          set stick=/var/run/media/${USER}/`\ls /var/run/media/${USER}`
          echo "stick set to $stick"
        endif
      else
        set stick=/media/`\ls /media`
        endif
      if(`echo $stick | \wc -w` != "1") then
        echo "more than one device in /media - cannot proceed"
        exit 1
        endif
    else
      set stick=/cygdrive/k
    endif
    \chmod -R u+w $stick
    @ files = 0
    cd ~/
    foreach discPath (ed/source/* \
                      ed/source/backup/* \
                      resources \
                      ed/resources \
                      ed/test.csh ed/test.bat ed/test_win.bat ed/test_win.csh  ed/README ed/releasenote.txt ed/releasenote_cumulitive.txt ed/sample*.c \
                      ed/docs/* \
                      ed/docs/backup/* \
                      ed/backup/* \
                      ed/coms/* \
                      ed/coms/backup/* \
                      work/* \
                      bin/ced bin/ced.bat bin/backup/* ed/bin/lin32/jot_dev ed/bin/lin64/jot_dev ed/bin/win32/jot_dev.exe ed/doc_test.t )
      set stickPath=`echo ${discPath} | \sed s.^.${stick}/.`
      if ( ! -d "${discPath}" && `\basename "${discPath}"` != "core") then
        cp -pv --update "${discPath}" "${stickPath}" | tee | grep '\->'
        if ("${status}" == "0") then
          #N.B. This is why we're not just using \cp -pR --update ...
          #The datestamp on the stick gets rounded down to the nearest even number of seconds.
          #So we round down both timestamps by the same.
          set dateStamp  = `\ls -l --full-time --time-style=+%Y%m%d%H%M.%S "${discPath}"  | \cut -d' ' -f6`
          @ secs = `echo ${dateStamp} | sed 's/^.*\.//'` / 2 * 2
          if ($secs < 10) set secs = "0${secs}"
          set dateNoSecs = `echo ${dateStamp} | sed 's/\...$//'`
          \touch -m -t ${dateNoSecs}.${secs} "${discPath}" "${stickPath}"
          @ files++
          endif
        endif
      end
    echo "Written a total of ${files} file(s) to ${stick}"
    exit 0

  else if("$1" == "-fromstick") then
    #Download from memory stick.
    cd ~/ed
    if( -d "/media") then 
      if(`\ls /media/ | \wc -l` == "0") then
        if(`\ls /var/run/media/${USER}/ | \wc -l` == "0") then
          echo "No devices in /media or /var/run/media/${USER} - cannot proceed"
          exit 1
        else
          set stick=/var/run/media/${USER}/`\ls /var/run/media/${USER}`
          echo "stick set to $stick"
        endif
      else
        set stick=/media/`\ls /media`
        endif
      if(`echo $stick | \wc -w` != "1") then
        echo "more than one device in /media - cannot proceed"
        exit 1
        endif
    else
      set stick=/cygdrive/k
    endif
    \cp -p  --verbose --update ${stick}/ed/source/* ./source
    \cp -p  --verbose --update ${stick}/ed/source/backup/* ./source/backup
    \cp -p  --verbose --update ${stick}/ed/releasenote.txt ./
    \cp -p  --verbose --update ${stick}/ed/README ./
    \cp -p  --verbose --update ${stick}/ed/test.csh ./
    \cp -p  --verbose --update ${stick}/ed/test.bat ./
    \cp -p  --verbose --update ${stick}/ed/test_win.csh ./
    \cp -p  --verbose --update ${stick}/ed/test_win.bat ./
    \cp -p  --verbose --update ${stick}/ed/sample*.c ./
    \cp -p  --verbose --update ${stick}/ed/backup/* ./backup
    \cp -p  --verbose --update ${stick}/ed/docs/* ./docs
    \cp -p  --verbose --update ${stick}/ed/docs/backup/* ./docs/backup
    \cp -pR --verbose --update ${stick}/ed/resources ..
    \cp -p  --verbose --update ${stick}/ed/coms/* ./coms
    \cp -p  --verbose --update ${stick}/ed/coms/backup/* ./coms/backup
    \cp -p  --verbose --update ${stick}/ed/bin/lin32/jot_dev ~/ed/bin/lin32/
    \cp -p  --verbose --update ${stick}/ed/bin/lin64/jot_dev ~/ed/bin/lin64/
    \cp -p  --verbose --update ${stick}/ed/bin/win32/jot_dev.exe ~/ed/bin/win32/
    \cp -p  --verbose --update ${stick}/bin/ced ~/bin/
    \cp -p  --verbose --update ${stick}/bin/ced.bat ~/bin/
    \chmod ugo+x ~/bin/ced ./test.csh
    \cp -p  --verbose --update ${stick}/work/* ~/work
#    \cp -p  --verbose --update ${stick}/doc_test.t ~/ed
    exit 0

  else if("$1" == "-newversion") then
    cd ~/ed
    shift
    if("$1" != "") then
      echo $1 | \grep 'v[0-9]'
      if($status == 0) then
        set version=$1
        shift
        if (-d "release/${version}/") then
          echo "Error: in specified version - ${version} already exists." 
          exit 1
          endif
        endif
      endif
    if("${version}" == "") set version=`\ls release -rt v* | jot -startup -tty -quiet -init='m0(m-r0(q-/0-9/l)0v-/./\)0oido~oo/%d/p %a'`
    set newVersion=${version}
    set versionDir="release/$version/"
    \mkdir -p $versionDir/source $versionDir/bin  $versionDir/coms $versionDir/docs $versionDir/bin/lin32 $versionDir/bin/lin64 $versionDir/bin/win
    \cp -p source/*.c source/*.h $versionDir/source
    \cp test.csh test.bat README releasenote.txt $versionDir
    \chmod ugo+x ${versionDir}/test.csh
    \cp -pR resources $versionDir
    \cp -p coms/*.jot $versionDir/coms
    \cp -p docs/* $versionDir/docs
    \cp -p bin/lin32/jot_dev  $versionDir/bin/lin32/jot
    \cp -p bin/lin64/jot_dev  $versionDir/bin/lin64/jot
    \cp -p bin/win32/jot_dev.exe  $versionDir/bin/win32/jot.exe
    \echo "" >> releasenote_cumulitive.txt
    \cat releasenote.txt >> releasenote_cumulitive.txt
    \echo "Release version ${version} "`\date` >> releasenote_cumulitive.txt
    set sourceDir="release/$version/source/"
    #
    \echo "Built new version in $sourceDir"

  else if("$1" != "") then
    echo "Unrecognized qualifier $1"
    exit 1
     
  else 
    shift
    endif
  end

if(" " != "${backup} ") then
  if( -d "temp${backup}") rm -rf temp${backup}
    mkdir temp${backup}
  set sourceDir="temp${backup}/"
  \ln -s ../source/backup/${backup} ${sourceDir}jot.c
#  chmod u+w ${sourceDir}jot.c
  endif

\rm -f jot.lis
echo "Compiling version ${version}" > source/jot.lis
 
if("$nowin" == "") then
  \rm -f jot${exeSuffix}.exe jot${exeSuffix}.obj
  echo "" >> source/jot.lis
  echo "" >> source/jot.lis
  echo "---------------------------------------------------------------------------------" >> source/jot.lis
  if(" " != "${backup} ") then
    set versionString='"'"jot for WindowsNT (from backup ${backup}) ${version}, built `\date +%d/%m/%y\ %H:%M:%S; ` using VC 10.0 with VC and GNU libs"'"'
  else
    set versionString='"'"jot for WindowsNT ${version}, built `\date +%d/%m/%y\ %H:%M:%S; ` using VC 10.0 with VC and GNU libs"'"'
    endif
  echo "Compiling ${sourceDir}jot.c (version string ${versionString} for windows" | tee >> source/jot.lis
  wine cl /DVC /Zi /D_DEBUG /DVERSION_STRING="${versionString}" ${sourceDir}jot.c /link /debug /out:jot${exeSuffix}.exe /map:jot.map >>& source/jot.lis
  wine cl /c /DVC /D__value=_value /Zi /D_DEBUG /DVERSION_STRING="${versionString}" ${sourceDir}jot.c >>& source/jot.lis
  echo "Windows link now..." | tee >> source/jot.lis
  wine link /debug /out:jot${exeSuffix}.exe jot.obj wine/libgw32c-0.4/lib/libgw32c.a wine/MSDKs/v7.1/Lib/*.Lib wine/lib/libgcc.lib >>& source/jot.lis
  if "${notest}" == "" wineconsole test jot${exeSuffix}
  endif

if("$nolin" == "") then
  \rm -f jot${exeSuffix} jot.o
  set versionString='"'"jot ${version}, built `\date +%d/%m/%y\ %H:%M:%S; \uname -nspr`"
  if(" " != "${backup} ") set versionString="${versionString} - from backup source ${backup}"
  set versionString="${versionString}"'"'
  echo "" >> source/jot.lis
  echo "" >> source/jot.lis
  echo "---------------------------------------------------------------------------------" >> source/jot.lis
  echo "Compiling ${sourceDir}jot.c (version string ${versionString} for linux" | tee >> source/jot.lis
  cc -DLINUX -g -Wall ${sourceDir}jot.c -D VERSION_STRING="${versionString}" -lncursesw -o jot${exeSuffix} |& tee >> source/jot.lis
  if "${notest}" == "" ./test.csh jot${exeSuffix}
  endif

#\which ndk-build > /dev/null
#if("$status" != "0" || "$noand" == "") then
#  echo "" >> source/jot.lis
#  echo "" >> source/jot.lis
#  echo "---------------------------------------------------------------------------------" >> source/jot.lis
#  echo "Compiling ${sourceDir}jot.c (version string ${versionString} for android" | tee >> source/jot.lis
#  pushd /home/jone/android/jot_android/jot_android/jni
#  ndk-build |& tee >> /home/jone/ed/source/jot.lis
#  popd
#  endif

if("$newVersion" != "") then
  #The -newversion qualifier was given.
  \cp -p jot${exeSuffix}.exe $versionDir/bin/jot.exe
  \cp -p jot${exeSuffix} $versionDir/bin/jot
  \chmod -R ugo-w $versionDir 
  endif 
   
if("$status" == "0") then 
  if("`\uname -m`" == "x86_64") then
    \cp jot${exeSuffix} bin/lin64
    \cp jot${exeSuffix}.exe bin/win32
  else
    \cp jot${exeSuffix} bin/lin32
    \cp jot${exeSuffix}.exe bin/win32
    endif
  endif
   
echo ""
echo ""
echo ""
#jot source/jot.lis -init='(f1/error/pm, f1/warning/pm, m)0 %a' -st -tty
#\grep -i warning source/jot.lis
\grep -i error source/jot.lis
\ls -lrt ${sourceDir}jot.c jot_*
# /home/jone/android/jot_android/jot_android/libs/armeabi/libjot.so
# /home/jone/android/jot_android/jot_android/jni/libs/armeabi/libjot.so
