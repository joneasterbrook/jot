%%Performs a binary search to identify the minimum set of commands in the given scrip, for the dev version of jot to fail.
%%It is assumed that the commands are aranged one command to a line as in the scripts generated by monkey_test.jot.
%%In this context, a failure is generally a crash - since monkey_test.jot-generated scripts have no correct result except to not crash.
%%If the test script exits normally error_search.jot sees to it that it should do so with the exit message "normal exit."
%%There is an option to search for valgrind failures, in this case error_search checks the valgrind logfile error-summary line.

%%
%%    Copyright (C) 2017-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%

%g?
  Command-line arguments:
    - -script=<pathName>[ +<pathname2>[ +...]] - pathName[s] of script[s] to be processed (this is copied to <pathName>_orig).
    - -valgrind - sets up to run the script under valgrind supervision.
    - -gdb - sets up to run the script under gdb supervision.
    - -timeout[=<n>] - script is deemed to have failed if it has not completed after n seconds (n defaults to 60)
    - -invoke=<name> name of jot image - typically jot, jot_dev - defauls to whatever's running error_search script.
    - -winedbg - sets up to run script under winedbg
    - -wine - runs script under wineconsole but only checks the exit status - use this when the script crashes winedbg.
    - -winecrash - runs script under wineconsole but only checks the exit status - use this when the script crashes winedbg.
    - -check - only performs the pass-0 fail check then exits.
    - -failif=<jotCommands> the commands used to detect an error - should fail if the script fails.
      - by default it checks the exit message "f/normal exit./\"
      - with the -valgrind modifier,defaults to "f/ ERROR SUMMARY: 0 errors from 0 contexts/\"
      - with -gdb modifier, defaults to "f/Program received signal SIGSEGV, Segmentation fault./
    
  Example usage (first generate the test script, then minimize it with error_search):
$ jot t.t -in="%r=error_search -script=./test611115913.jot;"
  
Demo:
  First generate the script if necessary:
$ jot t.t -st -in="%r=monkey_test -seed=123456789 -tests=1000 -crash"
  Now run error_search
$ jot t.t -in="%r=error_search -script=./test123456789.jot;"
  
  Buffer usage:
    $ - args and temp workspace.
    # - Main command macro.
    . - monkey-test script.
    B - bin (destination for all removed test lines.
    S - Script name.
    C - Command line.
    F - failure comparitor - a user specified command string - if it fails the script is deemed to have failed.
    H - progress monitor Header.
    P - Progress monitor buffer (scrollable part).
    T - pass start date/time.
    I - Invocation name (typically jot, jot_dev ...)
    _ - holds last-removed block.
:

%g#
%%Set up windows;
%w=clear; %wh=new -height=11; %w=new -height=15 -delim;
%%
%%Set up default invocation name.
%qi=system; (f/ Invocation name = /- b-k-0mk0, m-0k0i/jot/)
%%
%%Process command-line args.
z$r-0(v/ /, i-/ /) n.af&
%%
%%If -invoke is given this replaces the default.
r-0(f/ -invoke=/-n.(f1/ /, r0)ai&, )
%%
r-0
%%
( %%Script loop.
  ( %%Pass0 block - just checking that it really does fail.
    %%Pick up the next script name.
    z$(
      (f1/ -script=/ei/ _/f1/=/-, f1/ +/s/ _+/)n.(f1/.jot/-, f1/ /, r0)as&
    , %%Either no -script=<PathName> or no more pathnames.
      (r-0f1/_-script=/
        zp %x=Search completed.;?
      , %%No -script qualifier.
        zp %x=No -script=<pathname> - you must specify a test script to be searched.; ) )
    %%
    %e=rm -f l99.t.jnl/LOCK;
    %%Verify existance of the test script.
    ( %q=file 's;, zs %l; %w=refresh; %x=Test script &'s& does not exist, bye.;)
    %%
    %%Rename script
    %i.='s; zsr0i/_boiled/z. %b=pathname 's; %o='s;
    %%
    %%Use pid to uniquify no_fail pathname.
    %q@=pid; k
    %e=rm -f ./l99.t.jnl/LOCK;
    %%Now any optional args.
    ( z$r-0f1/ -valgrind/
      %%valgrind command line.
      %dc=%e@=\valgrind --leak-check=full --track-origins=yes &'i& l99.t -st -jou -init="%r= -asConsole &'s&\\\\\; %a" 2>\\\&1\\\;?;
      %%Valgrind failure detector.
      zfi"f/ERROR SUMMARY: 0 errors from 0 contexts/"
    , f1/ -gdb/
      %%gdb command line.
      %dc=%e@=\gdb -ex="set confirm off" -ex="r" -ex="q" --args &'i& l99.t -st -init="%r= -asConsole &'s& \\\; %a=\\\;" 2>\\\&1\\\;?;
      %%gdb failure detector.
      zfi"f/Program received signal SIGSEGV, Segmentation fault./\"
    , f1/ -timeout/- (v/=/roid, ol60)
      %%Launch the job and if it's not completed within the timeout period it's deemed to have failed.
      %dc=%e@=\timeout &'~& &'i& l99.t -st -init="%r= -asConsole &'s& \\\; %m=Normal_exit\\\; %a\\\;" 2>\\\&1\\\;?;
      %%timeout failure detector.
      zfi"f/Normal_exit/"
    , f1/ -winedbg/
      %e=rm -f error_search_NoFail;
      %%winedbg command line.
      n.ac& zci/%l; %e=echo "%e=touch\ error_search_NoFail\;" >> /i'si/\; rm -f error_search_NoFail\;echo "c" | \winedbg / i'i i/ l99.t -st -init="%r=/i@\\ -asConsole@i'si@\;\\ %a\;" 2>&1 > /dev/null @
      %%winedbg failure detector.
      zfi"%q=file error_search_NoFail;"
    , f1/ -wine/
      %%Check only wineconsole status code.
      n.ac& zci/%l;  (%e=\wineconsole / i'i i/ l99.t -st -init="%r= -asConsole/i'si/\; %a0\;";ol1, ol0) /
      %%winedbg failure detector.
      zfi"ol0(o=ok, ok\)"
    , f1/ -winecrash/
      %%Check only wineconsole status code.
      n.ac& zci/%l;  (%e=\wineconsole / i'i i/ l99.t -st -init="%r= -asConsole/i'si/\;\ %a0\;";ol0, ol1) /
      %%winedbg failure detector.
      zfi"ol0(o=ok, ok\)"
    , %%By default a crash supresses the Normal-exit message, so check for the no_fail file written at the end of a successful run.
      zfm-0k0i/(%q=file no_fail_/i'@i/; %e=rm no_fail_/i'@i/;? )/
      %%
      z$f1/ -xterm/
      %%xterm command line.
      n.ac& zci/%e@=\xterm -e / i'i i/ l99.t -st -init=\"%r= -asConsole/ i's i/\; z@m-0k0 %o=no_fail_/ i'@ i/\; %a0\;" 2>&1;? /
    , f1/ -xgdb/
      %%xgdb command line.
      n.ac& zci/%e@=/ i/\; \xterm -e \gdb -ex="set confirm off" -ex="r" -ex="q" --args / i'i i/ l99.t -st -init=t\"%r= -asConsole/ i's i/\; (t f.Program received signal SIGSEGV, ., z@m-0k0%o=no_fail_/ i'@ i/\;) %a0\;" 2>&1;/
    , %%If no run environment specified, run it in a subprocess.
      n.ac& zci/%e@=/i'i i/ l99.t -st -init=\"%r= -asConsole/ i's i/\; z@m-0k0 %o=no_fail_/ i'@ i/\; %a0\;" 2>&1; %l; /
      )
    %%
    %%If -failif=<cmds> is given this replaces the default comparator.
    ocr-0(f1/ -failif=/ n.(f1/ -/, r0)af&, )oco-or
    
    %%Initialize progress monitor etc.
    z.m0on n.ab& n.ah& n.ap& zpb100m-0 zh
    i/Progress monitor: /i's b
    i/------------------------------------------------------/b
    ol1o-o#
    oo/%8d - original size of test script./b
    o#
    oo/%8d - current size of test script./b
    ol1
    oo/%8d - current line number in test script./b
    ol0
    oo/%8d - current size of rubbish bin./b
    o#
    oo/%8d - current delete-block size./b
    ol0
    oo/%8d - blocks removed this pass./b
    i/Comparator command: /hfb
    i/Launch command: /hc
    %%
    %qt=date; mzpm0i/Progress summary:/b
    i/Pass  0, start time /i'ti/ (Ensures the script really does fail)/b m0 %w=refresh; 
    
    %%Print a timecheck.
    %q@=date; mp
    %%Check that this script really does exhibit errors.
    'c? %l; ('f zp %m=; %m=; %m=This script did not fail.;, %M=Pass0 OK - it fails;\?) )0
    %%
    %%Exit now if only a -check run.
    z$r-0 (f/ -check/zp %x=The script failed, error_search halted after pass 0 as requested.;, )

  %%Set up pass counter.
  ol1os zhm-0 zp  %w=refresh; 
  ( %%Main loop - remove a block of commands, re-run tests.
    %%If it exits normally restore block, if it fails put end of block in rubbish bin.
    %%
    %%Exit when block size reaches 1.
    ol1o=\
    %%Reset script and set up new block size.
    z.m-0 zhm+7okoid o~ol2o/o#oo/%8d/
    %%Reset blocks-removed-this-pass counter.
    zhm+8e8ol0oo/%8d/
    %%Get start time for current pass.
    %qt=date; mzpm0 oso#oo/Pass %2d, start time /i't o~os 
    
    ( %%Block loop - keep removing blocks until block-size is 1 and we've reached the end of the command script.
      %%Remove next block.
      z.n.o#om?a_ %o
      %%Print a timecheck.
      %q@=date; mp
      %%Re-run tests.
      %e=rm -f l99.t.jnl/LOCK; zp 'c? %l;
      %%Check results.
      ('f %%Success - failure is dependant on something in deleted block, restore this block and continue.
        z.h_
      , %%Fail - current block stays deleted.
        zbh_zhm+8oido~oo/%8d/
        %%Make a security copy of the last-failing version of the boiled-down script.
        z.n.a@& z@i/%e=\cp -p /i's i/ /i's i/~;/zp %w=refresh;  '@ )
      %%Update progress monitor.
      ( z. onm0onol1o-zhm+4e8oo/%8d/z.ono-om onzhm+5e8oo/%8d/ zbm0onol1o-zhm+6e8oo/%8d/, )
      %%Exit if at end of test script.
      zp  %w=refresh;  z.mm- )0
    %%Stop now if previous loop exited early.
    z.(m %x=Forced or error exit;, m-)
    %o
    
    %%Add summary for this pass.
    zhm+8oid zpm0r0oo/, removed %5d blocks / 
    zhm+7oid zpr0oo/of %8d lines/ 
    zhm+4oid zpr0oo/, script size now %8d lines/b
    zp  %w=refresh;  )0 zp  %w=refresh; )0
ok ok
:
  
'#
  
  