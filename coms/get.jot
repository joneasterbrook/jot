%%Picks up a file with a given pathname relative to current file or pwd.
%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
  
%g?
get.jot: help
  Basic usage:
> get[ -to|-allto=<chr>][ -depth=<n>][ -list][ -stdout][ -indent][ <pathSpec>]{F2}
     - The pathSpec may fully-defined path, in which  case  the  script  lists
       all members of the initial directory and invites you to select a  child
       file or a subdirectory.
     - Alternatively, the pathSpec may  contain  simple  wild  cards  "*"  any
       number of times in the names  of  any  number  of  path  elements.  The
       result will be a list of all possible matching path/file names.
     - In addition  to  simple  wildcards,  an  entire  path  element  may  be
       replaced by "**" (a tree-search wildcard) - in this case it launches  a
       breadth-first search of the filing system. The search depth  limit  may
       be set by the -depth=<n> parameter - defaults to 5.
     - -to=<chr> - specifies buffer key to be  used  for  the  first  selected
       file, for any subsequent files get.jot will prompt for a buffer key.
     - -allto=<chr> - specifies  buffer  key,  every  selected  file  will  be
       appended to the contents of the buffer. If both -to=  and  -allto=  are
       specified then the value set by -to= is silently ignored.
     - -indent when combined with -allto= this requests each nonblank line  be
       indented by two blanks - this is used with  -allto=  and  ensures  that
       each  new  document  is   identified   as   a   separate   chapter   in
       the buffer - see `About words, lines, phrases,  sentences,  paragraphs,
       sections and chapters`.  If  -allto=  is  not  given  then  -indent  is
       silently ignored.
     - -depth=<n> specifies  the  maximum  allowable  search  depth  for  tree
       searches (see wildcards, above).
     - -list  specifies  that  the  results  are  displayed  as  a   list   of
       fully-formed paths - by default results are displayed in  the  form  of
       a list of parent-directory paths, each followed by a list of children.
     - -stdout - on completion results are written to stdout and  the  session
       terminates, this option is probably of little  value  unless  the  path
       specification contains wildcards.
       
  If an initial path is given then the contents of the specified directory  is
  listeddisplayed as the parent pathname followed by a  list  of  children  in
  the ( + ) buffer. This buffer is effectively a menu - navigate up  and  down
  with the Up/DownArrow buttons and hit {Alt+0} to select an item.
  
  Moving to one of the child entries and calling macro ( 0  )  (  {Esc  0}  or
  {Alt+0} ) descends to the child. 
  
  If the child is a recognized document type the file is opened and  displayed
  in the nominated buffer.  MS-word  documents  (.doc  and  .docx)  are  first
  converted to plain text using  tika,  XL  spreadsheets  are  also  converted
  using tiks and PDFs are converted using ps2ascii. 
  
  If the child is another directory then the full pathname of  that  directory
  with a list of its children are appended to the menu buffer ( + ).
  
  If the selected child is an archive file ( .tar, .tz, .zip or  .cab  )  then
  the full pathname for the archive, followed by it's contents is appended  to
  the menu buffer ( + ).
  
  For each directory/archive entry in the menu  buffer  (  +  )  the  path  is
  prefixed with a key followed by an ascii tab (ascii tabs  are  displayed  as
  tildes ( ~ ) in jot). This is used to determine  the  correct  approach  for
  opening the object. The following keys are currently used:
    - dir - a simple directory.
    - tar --list --file - a tar archive.
    - tar -tvf - a compressed tar archive.
    - unzip -l - a zip-file archive.
    - cabextract -l - an MS-cabenet archive.
    
  If the original path contains wildcards then the filing system  is  searched
  for matching subpaths, the following wildcards are recognized:
    - * - Replaces any number of characters in a path-element name.
    - ** - Replaces any number (up to a preset limit) of path  elements.  Note
      that the ** must be an entire path element i.e. should be ( /**/ ).  The
      search depth can be set using the -depth=<n> modifier.
  On completion of a search entries are appended to the menu buffer - one  for
  each matching path. 
  
  If the ( 1 ) macro is used and -toall= was given then all  files  listed  in
  the menu buffer ( + ) are loaded in the specified buffer. If -toall was  not
  given then macro-1 exits with an error message.
  
Buffer usage:
  $ - Temporary - initially holds CLI Args, subsequently ho;ds latest directory or archive-file path, ....
  # - In a tree search it's the original user-supplied path specification.
  + - Directory listing/menu.
  @ - Temporary - copy of the extracted file, tika version name, path stubs,  ....
      and search-verification macro - checks that the current path concorms to the specification.
  0 - Main get macro.
  1 - Macro to load all listed files to buffer indicated by -allto= parameter.
  
Data objects:
  '=getDestinationKey     - target buffer to receive text file (see -to, above)..
  '=getAllDestinationsKey - target buffer to receive any number of text files (see -allto, above)..
  '=getTempfilePrefix     - For linux this is typically /tmp/get_<pid> - it is prepended to all temporary file names.
  '=getIndent             - Indent all nonblank lines to ensure identification of chapters.
  '=getSearchDepth        - maximum allowable search depth for tree searches (see -depth=<n>, above).
  '=getList               - changes results format to a simple list of pathnames.
  '=getStdout             - writes results to stdout (see -stdout, above).
      
Requires these utilities:
  - tar - gnu version, lists, unpacks and decompresses tar archives.
  - java/tika - converts various document formats to plaintext. 
  - iconv, converts various unicode encodings to UTF-8
  - unzip, unzips zip-format archives.
  - cabextract, extracts files from cabenet archives.
  
Behaviour
  - With no arguments, get assumes that the cursor points to a  valid  path  -
    either absolute or relative to the original file's path.
  - With no arguments and no valid path starting at the cursor, it  lists  all
    other files in the current-file's path.
  - If the given path does not begin with / ~ or . then it is taken  to  be  a
    path relative to the current-file's path.
  - If the given path begins with ./ then it is taken to be  relative  to  the
    users PWD.
  - If the relative path is not found below the original file's path  then  it
    is checked against the users PWD.
  - If path is not relative to PWD, it is next checked against  the  value  of
    env GetDefaultPath, if this env is set.
  - All references to the users  environmental  globals  are  translated  e.g.
    $<globName> or ${<globName>}.
:

%g@
<<GetInit>>
%%Called by user after selecting a file.
%%Extract the selected member of the directory/archive file.
%%
%%When called initially the current buffer is anything but ( + ) and ( $ ) contains the initial path specification.
obolc+
( o=
  %%In buffer ( + ) - this means we've done initialization and we're ploddng through interactively.
  ok onf-/	/-n.r0a$& ono-om 
  %%
, %%Initialization.
  %%Set up data objects.
  ( oq/'=getDestinationKey/ok, %%The get data objects are not defined - set them up now.
    %h'=data getDestinationKey; ol0ov/'=getDestinationKey/
    %h'=data getAllDestinationsKey; ol0ov/'=getAllDestinationsKey/
    %h'=data getIndent; ol0ov/'=getIndent/
    %h'=data getSearchDepth; ol5ov/'=getSearchDepth/
    %h'=data getList; ol0ov/'=getList/
    %h'=data getStdout; ol0ov/'=getStdout/
    %h'=data getTempfilePrefix; %q~=pid; mi"/tmp/get_"r0i/_/ z.ov/'=getTempfilePrefix/ )
  %%
  z$r0i/ /r-0i/ /
  r-0(f/ -to=/s/ /(q/a-z/cr-, ) oics/ /ov/'=getDestinationKey/, )
  r-0(f/ -allto=/s/ /(q/a-z/cr-, ) oics/ / o#ov/'=getAllDestinationsKey/ov/'=getDestinationKey/, )
  r-0(f/ -indent/s/ / ol1ov/'=getIndent/, )
  r-0(f/ -depth=/s/ /oids/ /, ol5) ov/'=getSearchDepth/
  r-0(f/ -list /s/ /ol1 ov/'=getList/, )
  r-0(f/ -stdout /s/ /ol1 ov/'=getStdout/, )
  %%Substitute envs, trim and transliterate the given path, expanding any envs.
  r-0 (f1/${/e2n.f1/}/a+e %q@=env '+;mz$i'@)0 r-0(v/ /e)0r0(v-/ /e-)0 
  ( %q=windows; r-0(f1/\/s"/")0, )
  %%
  %%The initial path specification is given in ( $ ).
  z$r-0 (v/~/ %q@=env HOME; mz$s'@ r-0, ) %%An initial {~} indicates the current users home area.
  %%
  %%The following logic determins what (if anything) should be prepended to the path.
  ( r  %%An initial path specification was given.
    %%For the purposes of the initialization logic, temporarilly remove all of the path from the start of the first wildcard element.
    z$r-0(f/*/(f-"/"-, r-0)n.r0a#, n.a#)
    %%
    ( z$r-0r %q=file '$;  %%The given path is valid, if it's a relative path then this is relative to our CWD.
      ok z$r-0 (v"/", %q@=wd; mr0(v-"/", i"/") z$i'@ )
    , %%Given path fails - try prepending with the current buffer's path.
      o#oz %q@=buffer; f/ pathname = /-br0 (f-1"/"-, r-0)e0 %q=dir '@&'$; z$r-0i'@ok
    , oz %m=get: Error - the given path "&'$&" could not be matched against the current pathname.; x0 )
    %%
  , %%No path was explicitly given - try picking up a path from the text.
    %%
    o#ozn.(q"a-zA-Z0-9/${}\ ."r)0a$&
    %%It is a path - is it a complete pathname for a file?
    %q=dir '$; ok  %%It's a direcrory - not a file.
    %%
  , %%A possible path in ( $ ) was picked up from the text - it failed on it's own so try prepending the current file's path.
    %q@=buffer; f/ pathname = /-b n.r0(f-1"/"-, r-0) %q=dir '@&'$;  z$r-0i'@ ok
  , %%Now try prepending GetDefaultPath. 
    %q@=env GetDefaultPath; mr0(v-"/", i"/")
    %q=file '@&'$;  %%It's a valid path.
    z$r-0i'@ ok
  , %%Assume the intention is to explore the current file's parent directory.
    oz %q@=buffer; f/ pathname = /- n.r0(f-1"/"-, r-0)a$& )
  %%
  %%If the path contains at least one wildcard - launch a search.
  z#r-0(f1/*/\, r-0i'$(%h'=call GetSearch;, ok %m=get: An error was detected in the tree search.; ) x0, )
  %%
  %%Set up the initial menu in buffer ( + )
  z$r-0n.r0a+z+r-0i/Initial dir 	/r0v-"/"?(f-"/"-, r-0)br0b-2
  %h'=call GetDescendSelection; )

<<GetDescendSelection>>
%%If the selected object is a directory or an archive list the contents, if it's a file descend into the file.
%%
%%Firstly, set up buffer ( $ ) with the parent path.
z+onf-/	/-n.r0a$& ono-om
%%
( %%Selected item case-block.
  %q=dir '$&'+;  %%Selected item is a directory - append a list of it's contents to buffer ( + ).
  ( %q@=dir '$&'+; n.ma$ %b=sort; (r\k)0r-h$m-r4i/	/r0(v-"/", i"/")m0r0b z+m0bh@f-/	/- 
    %h'=call getPromtSelection; x0
  , %m=get: something went wrong listing directory "&'$&"; x0 )
  %%
, %%Selected item is a file - copy/extract it to /tmp/get_<pid>_<uniquifiedName> - hold the uniquified name in buffer ( $ ).
  %%If the parent is a directory or an archive then use the appropriate extraction method.
  %%
  %% ( # ) is the archive name.
  %% ( $ ) becomes the simplified and uniquified extracted-file pathname - simplification is removal of any path-stub prefix,
  %% ( @ ) becomes the archive name of the file to be extracted (might includes subdirectories), 
  %%
  %%First pick up the parent path
  z+onf-/	/-n.r0a#&f-/	/
  %%
  ( v-/dir / %%A directory - just copy the selected file.
    ( ono-om n.r0a@& oq/'=getTempfilePrefix/ z@r-0i'~ok r0(f-/./rr-, r0) ol0 (%q=file '@; o~o#oo/_%d/)0 ok
      %e=cp "&'#&'+&" "&'@&";
      %%If it's not an archive then load it into destination buffer now.
      z+r0 ( (v-/.tar/\ v-/.tz/\ v-/.zip/\ v-/.cab/\ ) z@r-0n.r0a$& %h'=call getReadFile; x0, )
    , %m=get: Something went wrong copying "&'$&" from  "&'#&'+&"; )
  , v-/tar --list --file /
    ( z+ono-om n.r0a@& n.(f-1"/"-, r-0)a$& oq/'=getTempfilePrefix/ z$r-0 i'~ok r0(f-1/./rr-, r0) r0(f-1/./rr-, r0) ol0 (%q=file '$; o~o#oo/_%d/)0 ok
      %e=tar Oxf "&'#&" "&'@&" > "&'$&"; %h'=call getReadFile; x0, %m=get: Something went wrong extracting file "&'+&" from archive "&'@&".; x0  )
  , v-/tar --list --file --zip /
    ( z+ono-om n.r0a@& n.(f-1"/"-, r-0)a$&z$r-0i"/tmp/" r0(f-1/./rr-, r0) ol0 (%q=file '$; o~o#z@r0oo/_%d/)0 ok
      %e=tar Oxfz "&'@&" "&'#&"> "&'$&"; %h'=call getReadFile; x0, %m=get: Something went wrong extracting file "&'+&" from archive "&'@&".; x0  )
  , v-/unzip -l /
    ( ( z+ono-om r0n.r-0 ( (q/ :-/r)0 (q/0-9/r)0 )6 (v/ /r)0 ) a@& 
      z@r0n.(f-1"/"-, r-0)a$& oq/'=getTempfilePrefix/z$r-0i'~ok r0(f-1/./rr-, r0) ol0 (%q=file '$; o~o#oo/_%d/)0 ok
      %e=unzip -cq "&'#&" "&'@&" > "&'$&"; %h'=call getReadFile; x0, %m=get: Something went wrong extracting file "&'+&" from archive "&'#&".; x0  )
  , v-/cabextract -l /
    ( z+ono-om r0n.(f-1"/"-, r-0)a$&z$r-0i'~ok r0(f-1/./rr-, r0) ol0 (%q=file '$; o~o#z@r0oo/_%d/)0 ok
      %e=cabextract -F "&'@&" "&'#&" > "&'$&"; %h'=call getReadFile;, %m=get: Something went wrong extracting file "&'+&" from archive "&'@&".; x0  )
  , ok %m=get: Error - unrecognized archive format "&'+&"; x0 )
  %%
  %%if the selected item is an archive list it's contents and prompt again.
  ( z+r0( (v-/.tar/\ v-/.tz/\ v-/.zip/\ v-/.cab/\ )\   %%Selected item is an archive - append a list of it's contents to buffer ( + ).
    %%Next menu section is the contents of the archive.
    %%
    ( %%Selected item archive-type case block.
      %% ( $ ) - the archive-file pathname.
      z+r0v-/.tar/  %%Selected item is a tar archive - add it's contents to buffer ( + ).
        ( %e@=tar --list --file "&'$&&'+&"; b-i/  Original archive: /i'#i'+bi"tar --list --file 	"i'$i'+ z+m0bh@b f-/	/ %h'=call getPromtSelection; x0
%%        ( %e@=tar --list --file "&'$&"; b-i/  Original archive: /i'#i'+bi"tar --list --file 	"i'$ z+m0bh@b f-/	/ %h'=call getPromtSelection; x0
        , %m=get: something went wrong listing the contents of the tar archive "&'$&"; x0 )
        %%
      , v-/.tz/ %%Selected item is a compressed tar archive - add it's contents to the list.
        ( %e@=tar --list --gunzip --file "&'$&"; b-i/  Original archive: /i'#i'+bi"tar --list --file 	"i'$ z+m0bh@b f-/	/ %h'=call getPromtSelection; x0
        , %m=get: something went wrong decompressing an listing the tar archive with "&'$&'+&"; x0 )
        %%
      , v-/.zip/ %%Selected item is a PKWARE zip archive -  add it's contents to the list.
        ( %e@=unzip -l "&'$&"; i/  Original archive: /i'#i'+b i/unzip -l 	/i'$b z+m0r0b2h@ (m-r)0 m3 %h'=call getPromtSelection; x0
        , %m=get: something went wrong listing the zip archive "&'#&"; x0 )
        %%
      , v-/.cab/ %%Selected item is an MS cabenet archive - add it's contents to the list.
        ( %e@=cabextract -l &'$; z+m0r0b2i/cabextract 	/h$h@ (m-r)0 m3 %h'=call getPromtSelection; x0
        , %m=get: something went wrong listing the cabenet archive with "&'$&"; x0 ) )
      %%
      %h'=call getPromtSelection; x0 )
      %%
    , %m=get: Error failed to determine selected file type.; x0 ) )

<<getReadFile>>
%%Promps for destination buffer if not specified then loads selected file to specified buffer and exits.
%%Selection completed, we now have a copy of the selected file in /tmp/<originalName>
%%this may require translation to plain text.
%%
%%The file pathname is in buffer ( $ ) - maybe it's been uniquified to something like /tmp/<fileName>[_<uniquificationNumber>]
%%
z$r0( (v-/.doc/\ v-/.docx/\)\ %%It's assumed to be in MS-word document format.
  ( %q@=dir ${JOT_RESOURCES}; (f/tika/, %m=Error: No tika jar file in your resources area.; x0 )
    z$r-0r0(f-/./, r0)n.(f-1"/"-, r-0)a#& z#r-0i"/tmp/"r0i/.txt/r-4 ol0 (%q=file '#; o~o#oo/_%d/)0 ok
    %e=\java -jar ${JOT_RESOURCES}/&'@& --text '&'$&\\' > '&'#&\\'; 
  , %m=get: something went wrong converting to plain text with tika; x0 )
  %%
, v-/.pdf/ %%A pdf
  ( %%Translate the PDF.
    z$r0(f-/./, r0)n.r-0a#& z#r0i/.txt/r-4 ol0 (%q=file '#; o~o#oo/_%d/)0 ok
    %r=pdf2txt -ps2ascii \'&'$&\\\' '&'#&\\';
  , %m=get: Something went wrong translating file with pdf2txt; x0 )
  %%
, (v-/.xl/\ v-/.xls/\ v-/.xlsx/\)\ %%A MS spreatsheet - first identify the tika version (if any).
  ( %q@=dir ${JOT_RESOURCES}; (f/tika/, %m=Error: No tika jar file in your resources area.; x0 )
    z$r-0r0(f-/./, r0)n.(f-1"/"-, r-0)a#&z#r-0i"/tmp/"r0i/.txt/r-4 ol0 (%q=file '#; o~o#oo/_%d/)0 ok
    %e=\java -jar ${JOT_RESOURCES}/&'@& --text &'$& > &'#; 
  , %m=get: something went wrong extracting sheet with tika; x0 )
  %%
, %%Assumed to be a plain text file.
  z$r-0n.r0a#& )
  
%%Now we're all set to suck the text into the specified buffer - if it's accumulating text or if it's from an archive suppress the pathname.
oq/'=getDestinationKey/ (ol0o=ok %s=prompt Destination buffer > ; z@gm-(q/a-z/c, )r-0oic o#ov/'=getDestinationKey/ %s=prompt;, )
%%
%%Read the file to a temporary buffer ( @ ), if The text was from an archive then include the original archive pathname.
%i@='#; i/File /i'#i/  ------------------------------------------/b z+onf-/	/r-0n.(m-v/  Original archive:/)0 ma@.& ono-om
%%
%%If getAllDestinationsKey we are accumulating file images in the destination buffer otherwise clear it first.
( oq/'=getAllDestinationsKey/ol0o=\ok %%The destination buffer is accumulating file images - append this file.
  %%If the buffer already holds a file image then insert a chapter mark for this file.
  ( o#oz %q$=buffer; f/ pathname = /- v/(null)/, bo#ozm-0b-i/File / i'$i/  ------------------------------------------/m0r0b2 )
  z@ (oq/'=getIndent/ol1o=\, (rr- v/ /\ i/  /m, m)0 )ok o#ozm0 %b=pathname (null); on h@b2 ono-om
, %%If The text was from an archive then include the original archive pathname and suppress the pathname.
  ok z@m-0mv/  Original archive:/
  %%Append the new text as a new chapter to the buffer, if there was a pathname, then add another chapter mark at the top of the buffer.
  oz m-0k0e0 %b=pathname; m0onh@b2ono-om
, %%It's just a simple read of a non-archive file.
  z+onf-/	/-n.r0a@&ono-omn.r0a@+& oz %i='#; %b=pathname '@;  )
%%
%%Reset the destination buffer.
oq/'=getAllDestinationsKey/ ov/'=getDestinationKey/
%w=refresh; %l;
%m=There's your file.;

<<getDescendAll>>
%%Reads all files listed in ( + ) - ignores directories and archive files.
%h'=call GetInit;
( oq/'=getAllDestinationsKey/, %m=get: Error -toall was not specified.; x0 )
%%
z+m-0 
( %%Descend-all loop.
  %%Firse pick up the current path.
  (f1/	/m, ) onf-/	/-n.r0a$& ono-om
  %%Disregard directories and archive files.
  ( r\(m, x0), r-v"./"m,  v"../"m, %q=dir '$&'+;m, r0 (v-/.tar/\ v-/.tz/\ v-/.zip/\ v-/.cab/\)\m )0
  %%It's not a directory or an archive file - assume it to be text.
  %h'=call GetDescendSelection; ok z+m )0

<<GetSearch>>
%%Searches the filing system for matching paths or pathnames containing one or more wildcards ( * or ** ).
%%A '*' wildcard replaces any number of characters in a path-element name.
%%A '**' replaces any number of path elements (limited by getSearchDepth).
%%The default search-depth limit is 5, this can be changed with the -depth=<n> modifier.
%%
%%Init.
z#r-0
%%Strip out any mid-path /./ and /../ path elements.
z#r-0 (f1"/."- (v"/"e-2, v"./" r2oc(f-"/"-3, r-0)oco-oe, ) )0 r-0
%%
( %%Main search loop
  %%
  %%Pick up next non-wild subpath (might be of zero length if one wildcard is followed immediately by another).
  %%At the start of day buffer ( $ ) is the initial path.
  z#ocn.(f1/*/\r0a$&ok, (f-1"/"-\, ) (ol0o=a+&z+r0bn.a$, a$&) ok ) 
  %%Append the non-wild sub-path to each parent path and verify the complete pathname.
  z+m-0 ( (r\m)0 r0v-"/"(h$ %q=file '+; m, k), m)0
  %%
  %%Wildcard-type block - it's a tree search - pick up breadth-first depth limit otherwse set the depth limit to 1.
  ( z#v/**/  oq/'=getSearchDepth/ ol0oso-, ol-1 )
  %%
  ( %%Breadth-first search loop (single pass for simple searches), list each directory and prepend each item with the full path.
    z+m-0
    ( (r\m)0 mm- 
    ( f1/	/-\  %%First pass - just use the paths in the initial path list.
      (%q@=dir '+; r4i/	/m (z#v-"/"z@(i"/"mrr-)0, ) z+kbh@, z+m)0
    , %%Subsequent passes (deep searches only) append new path elements to the children.
      n.r0a$&m (r ( %q@=dir '$&'+; k (rr-i'+m)0 z+kh@, z+m) )0 ) )
    %%Remove any this-dir and parent-dir entries "./" and "../".
    z+m-0 (r\m)0 (f"/." (v"/./"k, v"/../"k), m)0
    o~ )0 ok
  %%
  %%Construct the filter macro ( @ ) - this verifies the most recent path elements.
  z#(v"**/"ol1r3, ol0)(rr- (v-"/"r-n.r, n.)(f1"/"-, r0)a@& z@r-0 (v|/*|s|v"/"|(rr-i|f1"|, x3), i|f1"|) (f1|*|-rr-e-i|"f1"| )0 (v-|*|\r0i|"|, e-)
%%  z#(v"**/"ol1r3, ol0)(rr- (v-"/"r-n.r, n.)(f1"/"-, r0)a@& z@r-0 (v|/*|s|v"/"f1"|, i|f1"|) (f1|*|-rr-e-i|"f1"| )0 (v-|*|\r0i|"|, e-)
    %%
    ( ol1o=  %%It's a tree search - following the first matching path element, continue searching for any later matches.
      z+m-0 ( (r\m)0r- f1/	/m, ( ol0 ('@ oxorokoc mn.m-a$&h$m-2o#ore0 mo#or(v-"/"r-, ) )0 kokrr-)0 mm-)0 
%%      z+m-0 ( (r\m)0r- f1/	/m, ( ol0 ('@ oxorokoc mn.m-a$&h$m-2o#ore0 mo#or )0 kokrr-)0 mm-)0 
   , %%simple search.
      z+m-0 ( (r\m)0r- f1/	/m, ( ('@ m, k) rr-)0 mm-)0, ) ok )
  %%
  %%Purge any duplicate paths.
  z+ m-0 ( (r\m)0 f1/	/-n.r0a$k (rr-f1/	/\i'$(v-"/"e-, )m)0 r-0)0  %b=sort; m0r0b  m-0 (r\k)0 r- (n.r0a$& m (v'$r0v-'$k)0 mm-)0 
  %%
  z#rr- )0
%%
%%Strip off trailing directory markers and re-sort with path depth as first sort criterion, then replace directory markers.
z+m-0 (r0 (v-"/"e-, )m )0 m-0 ( ol0 (f1"/"o~)0 r-0oo/%2d  /m)0 %b=sort; m-0(e4m)0 m-0 (%q=dir '+;r0i"/"m, m)0
%%z+m-0 ( ol0 (f1"/"o~)0 r-0oo/%2d  /m)0 %b=sort; m-0(e4m)0 
%%
%%Optionally rearrange into the usual get menu.
oq/'=getList/ol1 (o=ok, %%User has not requested results in list form.
  %%Merge duplicated paths.
  m0r0bm-0n.a$(r\k)0 ( (r0(v-"/", )(f-1"/"-, r-0) n. v-'$r-0v'$a$, r-0a$&b-r-0rr-(m-mb, )i/dir 	/m)m )0 ) ok
%%
z+m-0 %h'=call getPromtSelection;

<<getPromtSelection>>
%%Prompts user for next-level selection.
z+onm-0 (mm-  %%It found at least one path.
  ono-om %m=Navigate down to selected file and resume search with {Esc 0}.; 
, %%No paths found.
  ono-om %m=Failed to match any paths to &'#; )
(oq/'=getStdout/ol0o=okx0, %%Exit now, sending the list to stdout.
  ok %a='+; )

:
  
%%Only redefine functions if this is the first get.jot call:
( %h'=testkey GetDescendSelection;, %h'=call AddNewFunctions; )
%%
%%acro ( 0 ) is the restart point from interactive selection phase.
%d0=%h\'=call GetDescendSelection\; %w=refresh\;;
%%Macro ( 1 ) reads all files in menu.
%d1=%h'=call getDescendAll;
  
n.a+ 
%h'=call GetInit;
%w=refresh; 

