%%Picks up a file relative to current file.
%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%

%g?
   [Arg1  -  pathname stub.
   [Arg2  -  Destination buffer key.]]
 or
   [ -to=<key>] specifies buffer key if no pathname arg.
  
Buffer usage:
  # - Main command macro, then used to build directory-listing command.
  + - Holds directory listing.
  0 - Holds main get macro.
  $ - Temporary - holds Args.
  ! - Holds data parsed from original query:
      record 1 - path from arg
      record 2 - fileName from arg
      record 3 - destination buffer key.
      record 4 - pathName from text.
      record 5 - pathName of original file.
      
For future depth-first recursive searches
      record 6 - when descending a directory, contains the previous directory name.
      record 7 - Current subpath when performing a depth-first directory search (path contains wildcards).
      record 8 - Current path element of a depth-first directory search.
      record 9 - Remainder of given path when  performing a depth-first directory search.
      
Requires these apps (linux only):
  - file - reports file types.
  - tar - gnu version, lists, unpacks and decompresses tar archives.
  - java/tika - converts various document formats to plaintext. 
  - iconv, converts various unicode encodings to UTF-8
  - unzip, unzips zip-format archives.
  - cabextract, extracts files from cabenet archives.
  
Behaviour
  - With no arguments, get assumes that the cursor points to a  valid  path  -
    either absolute or relative to the original file's path.
  - With no arguments and no valid path starting at the cursor, it  lists  all
    other files in the current-file's path.
  - If the given path does not begin with / ~ or . then it is taken  to  be  a
    path relative to the current-file's path.
  - If the given path begins with ./ then it is taken to be  relative  to  the
    users PWD.
  - If the relative path is not found below the original file's path  then  it
    is checked against the users PWD.
  - If path is not relative to PWD, it is next checked against  the  value  of
    env GetDefaultPath, if this env is set.
  - All references to the users  environmental  globals  are  translated  e.g.
    $<globName> or ${<globName>}.
:

%g@
<<Get_xml2csv>>
%%After extracting spreadsheet as xml, this rebuilds the tables.
%%
%%Get the first sheet name and throw away all preeceding text.
( f"<table "b-k-0n.
  ( %%xml-token loop.
    ( f"<"
      v"<table " f"<caption>"-a$b2i/Sheet: /f1"</caption>"n.,
      v"<tr>" r4a$bn.,
      v"<td "f"</td>"f-">"-a$f"</td>"i/	/n.,
      f">"- ) )0
  m0a$b )
%%Now deal with any special characters.
m-0 
( (f"&"v-/\/r)0 %%Special-character loop - .
  v"&quot;" s/"/,
  v"&#34;" s/"/,
  v"&apos;" s/'/,
  v"&#39;" s/'/,
  v"&lt;" s/</,
  v"&#60;" s/</,
  v"&gt;" s/>/,
  v"&#62;" s/>/,
  v"&amp;" s/&/,
  v"&#38;" s/&/, r)0

<<GetDescendSelection>>
%%User has selected next level - load or list contents of this object.
%%
%%Construct complete path in $ buffer - buffer + contains either a directory or an archive-file listing - tab delimits the files pathname.
onr0r-0n.r0a$& (m-r)0m z$i'+i/	/
( r-0v/dir /e4f1/	/e %%It's in a simple directory.
  %%If path ends with ../ return to line following original start point.
  z!(m+6k0, ) z$r0(v-"/../" r-3v-"./", e3r-2f-1./.-n.r0a!+, )
  %%If the path contains "/../", '/./" or "//" then trim as approriate.
  r-0(f1"//"e)0 r0(f-1"/../" r3r-v"/"re-4(v-"/"\e-)0)0 r-0(f1"/./"e2)0 r0(v-"/"r-2re, )
  %%Is it a file or a directory?
  %q#=file '$
  ( f/directory = 1/
    %%It's a directory alright.
    z$ok
    %q$=dir '$
    z+m0r0b2 z$n.r0a++ 
    %b=sort
    (r\k)0 z+r0i"/"
    %%If descending from a child directory this will be in the 6th. line of buffer !.
    (z!m+6rz+m(v'!\m)0 m, z+m0r0bh$ w (m-r)0 m) w
    %m=Select again.
  , %%It's a file.
    %%If destination buffer undefined - prompt for it.
    (z!m+3r, %s=prompt Buffer key ?; g1 j- %s=prompt > ; ,)
    %%For archive files extract a contents listing and defer selection, for other file types read the file now.
    %%
    %%There's no \file command in  in DOSland.
%%    %q~=version; z~m
    
    ( %q=windows;
      %%In tatty-old windowsland they just identify file types by name extension - so when in Rome ... 
        ( z$r-0z~m-0k0e0h$
          v-/.zip/ %%zip archive data 
          ( z!m+3 z$i/%e$=unzip -l / z+m0r0b2h$b '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong while unzipping file "'$"; )
        , v-/.xls/ %%Excel spreadsheet - use tika
          ( z!m+3 z$(f1/\ /e)0r-0i/%e/i'!i/=/z!r-0e0r0z$i"java -jar %JOT_RESOURCES%/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from file "'$" with tika; )
          %m=Extracted all xls sheets using tika.
        , v-/.tar/ %%tar archive 
          ( z$i/%e$=tar -tvf / z+m0r0b2h$b '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong extracting sheet from file "'$" with tika; )
          %m=select a member of the archive.;
        , v-/.pdf/ %%pdf Document - use tika
          ( z!m+3 z$(f1/\ /e)0r-0i/%e/i'!i/=/z!r-0e0r0z$i"java -jar %JOT_RESOURCES%/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from file "'$" with tika; )
          %m=Extracted pdf text using tika.
        , v-/.doc/ %%An MS-word document - pre MS-word 2007 document - use tika
          ( z!m+3 z$(f1/\ /e)0r-0i/%e/i'!i/=/z!r-0e0r0z$i"java -jar %JOT_RESOURCES%/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from file "'$" with tika; )
          %m=Extracted MS-word-document text using tika.
        , v-/.docx/ %%XML document text - MS-word 2007+ document - use tika
          ( z!m+3 z$(f1/\ /e)0r-0i/%e/i'!i/=/z!r-0e0r0z$i"java -jar %JOT_RESOURCES%/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from file "'$" with tika; )
          %m=Extracted MS-word-document text using tika.
        , v-/.tz/ %%A special case for windows - the wbin tar can't decompress tarballs directly.
          ( z$okr-0i/%e$=cat /r0i/ | gunzip | tar -tvf -/b- z+m0r0b2h$ '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong decompressing the tarball "'$"; )
          %m=select a member of the archive.;
        , %%Any other file - assume it's some sort of text.
          ( z!m+3 z$r-0i/%i/i'!i/=/z!r-0e0 z+ono-om '$,
            %x=Error: something went wrong reading file "'$" - assumed to be plain text; )
          %m=Read your file - assumed to be plaintext; )
          
    , %%In linuxland use file to identify file types, this loop deals with symbolic links.
      z$m-0i/%e~=\file -z / r(f1/ /i/\\/r)0'$ z$f1/-z /-e-0 (f1/\/e)0 z~
      %%If it's a MS document but creating application is unspecified fudge round that now.
      (f1/ Composite Document File/ r-0((f1/ Microsoft Excel/\ f1/ Microsoft Word/\)
        r-0f1/:/v-/.doc/r0i/ Probably Microsoft Word/, v-/.xls/r0i/ Probably Microsoft Excel/, ) , )r-0
      ( f1/ text (gzip compressed data/ %%It's compressed text - read now.
          ( z!okm+3 z$i/%e/i'!i/=cat /r0i/ | gunzip -/z!r-0e0 z+ono-om '$,
            %x=Error: something went wrong uncompressing; )
          %m=Read a decompressed version of your file.
        , (f1/zip archive data/) %%It's a zip archive.
          ( z!okm+3 z$i/%e$=unzip -l / z+m0r0b2h$b '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong unzipping the file; )
        , f1/Excel/ %%It's a spreadsheet - use ssconvert (part of gnumeric).
          ( z$oki"%e"z!m+3z$i'!i"=ssconvert --export-type=Gnumeric_html:xhtml "r0i" fd://1" z+m0r0b2h$b '$ obz+h$w(m-r)0m ozok
          %h'=call Get_xml2csv; ,
            %x=Error: something went wrong extracting text from "'$" with ssconvert; )
          %m=Extracted all xls sheets using ssconvert.;
        , f1/ pdf Document/ %%It's a PDF document - use tika
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i"\java -jar ${JOT_RESOURCES}/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from "'$" with tika; )
          %m=Extracted text using tika.
        , (f1/ Microsoft Word/, f1/ Microsoft OOXML/) %%It's an MS-word document - use tika
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i"\java -jar ${JOT_RESOURCES}/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from "'$" with tika; )
          %m=Extracted text using tika.
        , f1/Microsoft Word/ %%It's an MS-word 2007+ (.docx) document - use tika
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i"\java -jar ${JOT_RESOURCES}/bin/tika-app.jar --text " z+ono-om '$,
            %x=Error: something went wrong extracting text from "'$" with tika; )
          %m=Extracted text using tika.
        , f1/Little-endian UTF-16 Unicode text/ %%Just like it says - Little-endian UTF-16 Unicode
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i/iconv /r0i/ -f=UTF-16LE -t=UTF8/ z+ono-om '$,
            %x=Error: something went wrong extracting unicode from "'$" with iconv; )
          %m=Extracted text using iconv.
        , f1/Big-endian UTF-16 Unicode text/ %%Just like it says - Big-endian UTF-16 Unicode
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i/iconv /r0i/ -f=UTF-16BE -t=UTF8/ z+ono-om '$,
            %x=Error: something went wrong extracting unicode from "'$" with iconv; )
          %m=Extracted text using iconv.
        , f1/Unicode text, UTF-32, little-endian/ %%Just like it says - Unicode text, UTF-32, little-endian
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i/iconv /r0i/ -f=UTF-32LE -t=UTF8/ z+ono-om '$,
            %x=Error: something went wrong extracting unicode from "'$" with iconv; )
          %m=Extracted text using iconv.
        , f1/Unicode text, UTF-32, big-endian/ %%Just like it says - Unicode text, UTF-32, big-endian
          ( z!okm+3 z$r-0i/%e/i'!i/=/z!r-0e0r0z$i/iconv /r0i/ -f=UTF-32BE -t=UTF8/ z+ono-om '$,
            %x=Error: something went wrong extracting unicode from "'$" with iconv; )
          %m=Extracted text using iconv.
        , (f1/ text/, f1/ empty/) %%It's plain text or empty.
          ( z!okm+3 z$r-0i/%i/i'!i/=/z!r-0e0 z+ono-om '$,
            %x=Error: something went wrong while trying to read file "'$"; )
          %m=Read your file.
        , f1/tar archive (gzip compressed/ %%It's a compressed tar archive.
          ( z$okr-0i/%e$=tar -ztvf /r0b- z+m0r0b2h$ '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong opening tarball "'$"; )
          %m=select a member of the archive.;
        , f1/tar archive/ %%It's a, possibly compressed, tar archive.
          ( z$okr-0(f1/ /i/\\/r)0 r-0i/%e$=tar -tvf / z+m0r0b2h$b '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong opening tarball "'$"; )
          %m=select a member of the archive.;
        , f1/PE32 executable/ %%Maybe a cabenet?
          ( z$oki/%e$=cabextract -l / z+m0r0b2h$b '$ z+h$w(m-r)0m ok,
            %x=Error: something went wrong accessing cabenet archive "'$"; )
          %m=select a member of the archive.;
        , %%Any other file - assume it's some sort of text.
          ( r-0f1/: /-e-0 z~r-0(f1/`/s/"/f1/'/s/"/, ) z!%m=File was type "'~" reading it anyway.;
            m-0m2 z$r-0i/%i/i'!i/=/z!r-0e0 z+ono-om '$,
            %x=Error: something went wrong reading file "'$" - it was assumed to be plaintext; )
          %m=; ) ) )
           
  , ( %%If destination buffer undefined - prompt for it.
      (z!m+3r, %s=prompt Buffer key ?; g1j- %s=prompt > ; )
      %%Extract the selected member of the archive file - in whatever file type.
      z$f1/unzip | tar -tvf /- %%File is in a compressed tar archive (windows only).
      r-0f1/	/eb ((v/ /r)0(q/-:0-9/r)0)3(v/ /r)0 e-0j-i/ "/r0i/"/ r-0f1/ -tvf /s/ -Oxf / r-0f1/$/z!m+3z$s'!z!r-0e0 z+ono-om '$
    , f1/tar -tvf /- %%File is in a tar archive.
      ( e-0 f1/	/ebr0f-1/ /e-0j-r-0 z!m+3 z$i/%e/i'!i/=tar -Oxf / z!r-0e0z+ono-om '$,
        %x=Error: something went wrong extracting file "'$"; )
    , f1/tar -ztvf /- %%File is in a compressed tar archive.
      ( e-0 f1/	/ebr0f-1/ /e-0j-r-0 z!m+3 z$i/%e/i'!i/=tar -zOxf / z!r-0e0z+ono-om '$,
        %x=Error: something went wrong decompressing file "'$"; )
%%    , f1/xls2csv /- %%File is a spreadsheet.
%%      ( (v/ /r)0f1/-l/(v/	/\e)0e i/ -f "	" -t / z!m+3 z$r-0e3i/%e/i'! z!r-0e0z+ono-om '$,
%%        %x=Error: something went wrong extracting sheet "'$"; )
%%      %b=tabcells -1
    , f1/unzip -l/- %%File is a zip archive.
      ( e-0r0(v-/.doc/, v-/.docx/) %%It's deemed to be in ms-office document format.
        ( r-0(v/ /r)0f1/	/eb ((v/ /r)0(q/-:0-9/r)0)3(v/ /r)0 e-0j-i/ "/r0i/"/r-0 z!m+3 z$i/%e/i'!i"=unzip -pq "r0i"| \java -jar ${JOT_RESOURCES}/bin/tika-app.jar --text -" z!r-0e0z+ono-om '$,
          %x=Error: something went wrong converting to plain text with tika "'$"; )
      , v-/.pdf/ %%A pdf
        ( r-0(v/ /r)0f1/	/eb ((v/ /r)0(q/-:0-9/r)0)3(v/ /r)0 e-0j-i/ "/r0i/"/r-0 z!m+3 z$i/%e/i'!i"=unzip -pq "r0i"| \java -jar ${JOT_RESOURCES}/bin/tika-app.jar --text -" z!r-0e0z+ono-om '$,
          %x=Error: something went wrong converting to plain text with tika "'$"; )
      , (v-/.xl/, v/.xls/) %%An ms spreatsheet.
        ( r-0(v/ /r)0f1/	/eb ((v/ /r)0(q/-:0-9/r)0)3(v/ /r)0 e-0j-i/ "/r0i/"/r-0 z!m+3 z$i/%e/i'!i"=unzip -pq "r0i"| \java -jar ${JOT_RESOURCES}/bin/tika-app.jar --text -" z!r-0e0z+ono-om '$,
          %x=Error: something went wrong extracting sheet with tika "'$"; )
      , %%Not a recognized binary format.
        ( e-0 (v/ /r)0f1/	/eb ((v/ /r)0(q/-:0-9/r)0)3(v/ /r)0 e-0j-i/ "/r0i/"/r-0 z!m+3 z$i/%e/i'!i/=unzip -cq / z!r-0e0z+ono-om '$ ),
          %x=Error: something went wrong inzipping plain-text file "'$"; )
    , f1/cabextract -l/- %%File is an MS cabenet.
      ( e-0 (v/ /r)0f1/	/e0r-0 z!m+3 z$i/%e/i'!i/=cabextract -p -F / z!r-0e0z+ono-omr0n.f-1/ /-a$.&r-0 '$,
        %x=Error: something went wrong extracting from cabenet archive "'$"; )
    , %m=Unknown archive type.; ) )

<<GetInitializeSearch>>
%%First gather up all known data into the ! buffer.
%%Init
ob
%%Translate any env-variable references.
obz$ ( f1/$/e(v/{/en.f1/}/a!e, n.(q/a-zA-Z0-9_-/r)0a!) z!r-0i/%q!=env / '! mz$i'! )0 oz
%%
%%Sort the arguments into path, fileName and destination buffer key in first 3 records of ! buffer.
z$m-0 (v/ /r)0 n.
%%Simplify all "\ " and change backslashes to slashes.
(f1/\ /e)0r0a! z!r-0(v"\"s"/", r)0 
%%Trim off trailing path separator.
((r-2r2v-"/"e-, )f-1"/"-b, r-0b) 
%%Implement -to qualifier.
(f1/-to=/e4, f1/ /(v/ /e)0, r0)
%%
b-(v-/ /e-)0mr0bb-
%%
%%In windows it fails if it's just a drive letter but OK if drive letter followed by "/."
(%q=windows; m+1r0i/./, )
%%
%%Extract anything that might be a path or file name from the text - to record 4 of ! buffer.
o#oz (q/ "'/r)0 ocn.(q"-/~\{}$.@_0-9a-zA-Z"(q//r)0, ) a$&oco-or z!m+4h$
%%
%%Extract path from current buffer - to record 5 of ! buffer.
o#oz%q~=buffer; f/pathName = /-b(f1/\ /e)0 r-0n.r0(f-1./.-, r-0i"./"r0) a$& z!m+5h$ oko#oz
  
%%Now analyze paths in ! buffer, if it's a '~' this gets translated now.
z!m-0 (rr-, m+4)
( v"~/"e2 
  %q+=env HOME 
  mz!i'+i./.
, 
  v/~/s"/home/", )
   
%%Path prioritization behaviour implemented here:
%%
( %%Search the given path, if it's a relative path, first try prefixing the file's path then pwd.
  %%
  z!m-0n.r0a$&z$ 
  ((v"/"\ r?v/:/\)\ %%It's an absolute path - no prefixing required.
    ( %q+=dir '!;, %M=Absolute path '! failed; )
  , %%If there is a given-name element begining "./" it's relative to users PWD.
    ( r-0v"./" %%Path is relative to users PWD.
      z!m-0 %q+=dir ./'!;
    , %%Path is assumed to be relative to current-document's path - try <filePath>/<givenSubpath> 
      z!m+2rr- z$r-0i"/"z!m+5n.r0f-1"/"a$-& (%q+=dir '$; ) ) )
   
, %%Search for an *exact* match of text string in ${GetDefaultPath}.
  z!m+4q/a-zA-Z/ (%q~=env GetDefaultPath;\z+ok, m z!z$%q+=file '~/'!; r-0v/file/s/dir/r0f-1"/"-bmk0m-)
     
, %%If current buffer has a pathname, list it's siblings.
  z!m+5r0v-/(null)/\r-0n.r0f-1"/"-a$& z+m0b %q+=dir '$;
 
, %%Give up and offer the contents of the users pwd.
  %q+=dir .; n.ma$%b=sort; h$j
   
, %%In theory this should never happen.
  %m=Path Validation failed; )
ok

%%If no match then exit with a suitable message.
z+m-0(mr, %x=Invalid path '$; )
%%
%%Sort the directory listing in + buffer.
z+m-0n.r0a$ %b=sort; (r\k)0r-b-h$ (v-"/", i"/") m0r0bm-0
%%
%%Does the given name element match anything in there?
( z!m+2 r-v/*/z+m0, r\z+m0, z+m (f1'!\k, m)0 )
%%To fix a bug in jot - killing the last line simply erases all text.
m0(r\j-, )
%%
%%Add original query to +:
z!m-0n.m2a+-& z+b-m-j-r-0i/GET /m2
%%
%%If there is only one match then take that one.
( m2\ %h'=call GetDescendSelection;, (m-r)0m2 %m=Select one of these matching names and then hit {KP_0}; )

<<GetSelfTest>>
%%Self-test  operations for get.jot.
%%
%%This env is needed by part 7.
%s=setenv GetDefaultPath /usr/include
%%
%m=******************************************** get.jot test  part 1;
%m=Test that it can pick up a partly-defined given file spec            - should return a list of files in test_get
z.%i.=${JOT_RESOURCES}/test_get/hello.c;
%d$=test_g; z. %h'=call GetInitializeSearch;
m-k-0 %b=sort;
%%Verify result.
( v"new_test_get.tz" mv"test_get.tar" mv"test_get.zip" m\, p0%a1=Failure: get.jot test part 1; )
 
%m=******************************************** get.jot test part 2;
%m=Test that it can pick up from a given subdirectory of the file path  - should offer directories test_get/another_dir1 and another_dir2
z.
%%%d$=%% another; %h'=call GetInitializeSearch; 
%d$=another; %h'=call GetInitializeSearch; 
m-k-0 %b=sort; (v"another_dir1/" mv"another_dir2/" m\, p0%a1=Failure: get.jot test part 2;)
 
%m=******************************************** get.jot test part 3;
%m=Test pickup of a file that's in in the current-file's dir            - should offer four *s* files in test_get (test.tar, test.tz, test_get.tar and test_get.zip)
z.
%d$=test_get/s; %h'=call GetInitializeSearch; 
m-k-0 %b=sort; (v/dir with whitespace in name/ mv"new_test_get.tz" mv"test.tar" mv"test.tz" mv"test_get.tar" mv"test_get.zip" m\, p0%a1=Failure: get.jot test part 3;)
  
%m=******************************************** get.jot test part 4;
%m=Test pickup of a local file                                          - should prompt for buffer key then pick up test_get/hello.c
z.
%%%d$=%% llo a; %h'=call GetInitializeSearch; 
%d$=llo a; %h'=call GetInitializeSearch; 
(%q~=buffer; f"pathName = "f1"test_get/hello.c" z.ok, p0%a1=Failure: get.jot test part 4;)
  
%m=******************************************** get.jot test part 5;
%m=Test pickup of a file in a local subdirectory                        - should prompt and pick up ./another_dir1/hello.c .
z.
%%%d$=%% another_dir1/.c a; %h'=call GetInitializeSearch; 
%d$=another_dir1/.c a; %h'=call GetInitializeSearch; 
(%q~=buffer;  f"pathName = "f1"test_get/another_dir1/hello.c" z.ok, p0%a1=Failure: get.jot test part 5;)
 
%m=******************************************** get.jot test part 6;
%m=Test similar but incomplete path                                     - should offer a selection of items in ./test_get/ .
z.
%d$=test; %h'=call GetInitializeSearch; 
m-k-0 %b=sort; (v"new_test_get.tz" mv"test.tar" mv"test.tz" mv"test_get.tar" mv"test_get.zip" m\, p0%a1=Failure: get.jot test part 6;)
  
%m=******************************************** get.jot test part 7;
%m=Test pick up a simple name from text when file local                 - should prompt and pick up /usr/include/stdio.h .
z.f/stdio/
%%%d$=%% -to=a; %h'=call GetInitializeSearch; 
%d$=-to=a; %h'=call GetInitializeSearch; 
%q~=buffer; (f"pathName = /usr/include/stdio.h" z.ok, p0%a1=Failure: get.jot test part 7;)
 
%m=******************************************** get.jot test part 8;
%m=Test pick up a pathname from text when file in GetDefaultPath env    - should prompt and pick up /usr/include/stdio.h .
z. f"stdio.h"
%%%d$=%% -to=a; %h'=call GetInitializeSearch; 
%d$=-to=a; %h'=call GetInitializeSearch; 
%q~=buffer; (f"pathName = /usr/include/stdio.h" z.ok, p0%a1=Failure: get.jot test part 8;)

( %q=windows; %%My copy of tar doesn't work in wine.
, %%tar OK in linuxland
  %m=******************************************** get.jot test part 9;
  %m=An uncompressed tarball                                              - should return hello.c from the another_dir1 dir in archive. 
  z.
  %%%d$=%% . a; %h'=call GetInitializeSearch; 
  %d$=. a; %h'=call GetInitializeSearch; 
  f/test.tar/
  '0
  m5
  '0
  %q~=buffer; (f"pathName = [ From CLI command tar -Oxf "f1"test_get/test.tar test_get/another_dir1/hello.c ]" z.ok, p0%a1=Failure: get.jot test part 9;)
   
  %m=******************************************** get.jot test part 10;
  %m=A compressed tarball                                                 - should return t.t from the another_dir1 dir in archive. 
  z.
  %%%d$=%% test.tz a; %h'=call GetInitializeSearch; 
  %d$=test.tz a; %h'=call GetInitializeSearch; 
  mf/t.t/
  '0
  %q~=buffer; (f"pathName = [ From CLI command tar -zOxf "f1"test_get/test.tz test_get/t.t ]" z.ok, p0%a1=Failure: get.jot test part 10;) )
  
%%#%m=******************************************** get.jot test part 11;
%%#%m=If no given path, defaults to listing current file's directory.
%%#z.l0
%%#get
%%#echo 'dv"../" mv"./" mv".cproject" mv".project" mv"another_dir1/" mv"another_dir2/" mv"hello.c" mv"t.t" mv"t.t.jnl/" mv"test.tar" mv"test.tz" mv"test_get.tar" mv"test_get.zip" m\, p0%a1=Failure: get.jot test part 11;' >> test10.jot
 
%a0=get.jot seems OK

:

%%Only redefine functions if first get.jot call:
( %h'=testkey GetInitializeSearch;, %h'=call AddNewFunctions; )
%%obn.a0z0i/%h'=call GetDescendSelection;/oz
%d0=%h\\'=call GetDescendSelection\;;

%h'=call GetInitializeSearch;

w

