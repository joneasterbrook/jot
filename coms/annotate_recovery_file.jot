%%Annotates the escape sequences in a recover_now.jot or any -asConsole script.
%%
%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%

%g#
%%Setup - read the startup and keymap files to create a lookup hashtable.
%%
%h=create 10;
%%Read the startup file to get the functions map - buffer ( ! ) then extract function names.
%%If there is more than one - e.g: a local startup calls a standard startup then take the on that defines the hot-key mappings.
m-0 ((f/startup.jot/r-0v/%%Recovery pathname: /\m)0 f1/: /-(v/ /r)0oidrn.ora$& %i!='$; f/%g!=Hot_Keys;/\z.m)0
(v/%g!=Hot_Keys;/k-0 f/Hot_Keys:/k0, %X=Error: failed to find the hot keys section of this startup file.; )
%%Read the keycodes to buffer ( @ ).
z.m-0 (f/_keys_/r-0v/%%Recovery pathname: /\m)0 f1/: /-2(v/ /r)0oidrn.ora$& %r='$
%%Set up the hash table.
%d~=; z~m-0 %h=create 1000;
%%The floating buffer becomes a data object in the original buffer ( . ).
z.o# %h=setdata -new keyCodeLookup;
%%Make the floating buffer into a direct keycodes-to-functions mapping hashtable.
z!m-0 (f/ /(v/ /e)0n.(f1/ /, r0)a$ (z@m-0 (f'$r-0n.f1/ /a$& z~r0bi'!r-0z~, z~m-0f'!) z$r-0(f/^/eoicolx40o-oo/%c/)0 z~ %h=newjump .=keyCodeLookup|&'$;, ) z!m)0
%%z!m-0 (f/ {/rn.f1/}/-a$ z@m-0(f'$r-0n.r12a$& z$r-0(f/^/eoicolx40o-oo/%c/)0 z~r0bi'!r-0z~ %h=newjump .=keyCodeLookup|&'$;, ) z!m)0
  
%g@=CodeFor_KeyCodeUpdate;
<<KeyCodeUpdate>>
%%The %S=on_key handler for the line-numbers display buffer.
%%
%s=system 1; 
( obolc.o=ok  %%In buffer ( . ).
  %%Get the window height, if there isn't a linenumber window then exit now..
  %q$=window; 
  ( f/win:0  = fixed on buffer  ( * ), /- %%Found the linenumber slice.
    oid
  , %%The annotation slice has gone walkabout - yet the callback is still set???
    z. %d*=; z* %b=footer Function;
    %s=on_key -after; 
    %h'=call WindowOne;
    %m=The linenumer window has been removed.; x0 )
  %%Get the line number at the top of the window.
  osz.os %q$=buffer; f/ OldFirstLineNo = /-oid
  %%If no colour pair set up for the linenumbers slice, do that now.
  z*m-0k0 %q$=buffer; (f/  TagType = Name    LineCount, /, z* %b=tagtype -colour=white:blue LineCount; %b=tagtype -colour=white:red Annotation; )
  %%Set up the line numbers.
  z*osol0oso- (o~oso#oo/%6d/ %b=addtag LineCount; o~osb)0 okokz.
  %%Add the keycode translation.
  %%Align the display buffers.
  %q$=buffer; f/SubstringLength = /-oidz.ocon oq/.=keyCodeLookup/ r-0z*m-0 z.%q$=buffer; f/ OldFirstLineNo = /-oid z.ono-om
  %%Set the annotation.
  ( (f1//n.(f1/ /, r0)a$& %h=jump .=keyCodeLookup|&'$; z*r0i/ /i'~%b=addtag Annotation;, ) z*mz.m)0
%%  ( (f1//n.r0a$& %h=jump .=keyCodeLookup|&'$; z*r0i/ /i'~%b=addtag Annotation;, ) z*mz.m)0
  %%Reset ( * ) and restore the original focus.
  z*m-0 z.okono-omorou
, %%Abstracion failed, presumably because we're in the ( * ) buffer.
  ok
  )
%%z.
%s=system 0;

CodeFor_KeyCodeUpdate:
%h'=call AddNewFunctions;
  
%%Now set up the window.
z. %d*=; z* %b=footer Function;
ob %q$=window;
m-0 f/screenHeight = /- oid ol1o- 
%w=clear; %w*=new -height='~ -width=27 -delim;
f/ screenWidth = /-oidol28o- 
%w=new -width='~ -delim;
z.
  
%%Activate the KeyCodeUpdate function as an on_key sequence.
%s=on_key -after %h\'=call KeyCodeUpdate; )
%w=refresh;
  
:
'#

