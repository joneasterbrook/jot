%%Defines functions for a simple Integrated Development Environment (IDE) for gdb.
%%
%%
%%    Copyright (C) 2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%
  
%g?
  This is a very simple IDE for gdb and winedbg, it can edit, launch the compiler and 
  launch then interact with the relevant debugger and, er ... um, that's about it.
  
Buffers used/defined:
  - L - the logfile for debuggers (gdb or winedbg)
  - - the menu buffer.
  - $ Temporary and parameter passing.
  - @ Temporary, used in setup and also in mouse-click handler.
  - ! Temporary, used in setup and also in mouse-click handler.
  
Requirements:
  - window must be wide enough to display drop-down menu.
  
Restrictions - too numerous to list all of them here:
  - Currently, can only handle projects with a single source file.
  
Functions and escape sequences defined:
  <<LeftClick>>       - Left-button click handler dispatches calls to functions defined in the menu description.
  <<gdbWindows>>      - Redefines the window panes.
  <<Compile>>         - Wrapper function called by the Compile button.
  <<on_key_function>> - updates source-file's delimiter line.
   
  {Esc w g} - calls gdbWindows
  
:

%%Set up hashtable, data objects etc.
%h.=create 100;
%h=data .=winNotLin;     ol0                   ov/.=winNotLin/      %% (winNotLin==1) indicates compile with cl, run with wineconsole/winedbg
%h=data .=term;          ol0                   ov/.=term/           %% (term==1) indicates target is run in a separate xterm/wineconsole
%%  z.%q$=buffer; f/pathname = /-b
%%  %h=data .=separator;     %d~='$ [Unchanged];   ov/.=separator/      %% separator indicates the current modified/saved state of the source file.
%%  oq/.=separator/ z. %b=footer '~;
%%
%%The following compile options default as below but may be redefined by your personal startup script.
%%first pick up the default source path from buffer ( . )
z.%q~=buffer; f/ pathname = /-b-k-0mk0z.
%h=data .=sourcePath;                          ov/.=sourcePath/     %% source pathname - both linux and windows.
%h=data .=linExePath;    %d~=./a.out;          ov/.=linExePath/     %% executable pathname - linux.
%h=data .=ccOpts;        %d~=;                 ov/.=ccOpts/         %% cc (linux compiler) options.
%h=data .=ldOpts;        %d~=;                 ov/.=ldOpts/         %% ld (linux linker) options.
%h=data .=winExePath;    %d~=;                 ov/.=winExePath/     %% executable pathname - windows.
%h=data .=clOpts;        %d~=;                 ov/.=clOpts/         %% cl (windows compiler) options.
%h=data .=linkOpts;      %d~=;                 ov/.=linkOpts/       %% link (windows linker) options.

%g-
+gdbM1_ "File"  "Save"  "Compile"  "Run"  "dbg_start"  "dbg_run"  "dbg_continue" "dbg_quit"  "dbg_break"  "dbg_command"
  
gdbM1_File:
-  "Reload"  "Abandon"  "Save"  "LinuxLand"  "WindowsLand"  "Do"  "ScriptByName"  "ScriptByFunc"
 
gdbM1_Options:
-  "wine" "term"
  
gdbM1_Help:
-  "Help"  "FindAllHelp"  "RemoveHelpFold"
  
:
  

%%Macro to analyse the user-defined menu and create the necessary functions etc.
%g#
%%First define the colour tag.
z-  %b=tagtype   -colour=7:5  Menu;  %%Mauve colour tag for static menu.
%%
%%Analyze the menu options and set up colour tags, clickable regions and callbacks.
z-m-0n.a@&
( %%Line loop
  v/+/ %%It's a static menu item, this remains in the menu buffer, abstract function-name prefix to ( ! ) buffer.
  m,
  
  f1/:/f-1/ /\r(v/ /r)0r\ %%It's a label, the label string will become a function name which had better not collide with any other function.
  r-0n.f1/:/a$& z@m0(f-/<</m0m-r0bi|z-m0r0i/ / oz|, ) m0bi/<</h$i/>>/b i/%s=system 1; ob/b z-m,
  
  v/-/ %%It's a submenu item - add it to current function.
  %%Pick up the function-name prefix.
  rn.f1/ /a!e
  %%Strip out minus sign and add some whitespace to the end - this prevents the colours running into the console area..
  er0i/ /
  %%Check that we have already identified at least one label.
  (z@f-/<</, z- %x=Syntax: Encountered a submenu line before any valid label line.; )
  %%Code to add line and insert tags to new submenu item.
  m0i|z-m0r0bi`|i'-i|`r-0( f`"`eoco#n.f1`"`a$&eocoso-osr-0orou %b=addtag Menu;   %b=addtag -text=|h!i|'$; )0|b z-k,
  
  %%Ignore all other lines.
  k)0
z@m0m-r0bi|z-m0r0i/ / oz|
z-m-0(v/+/m,k )0
   
%%Set up a function to define the static menu if required.
z-m-0(r\, 
  %%There are some static menu items.
  z-n.f1/ /a!e
  z@m0bi|<<gdbWindows>>|b
  i|z-m-0k0|b
  (i|i/|i'-i|/r-0( f/"/eoco#n.f1/"/a$&eocoso-osr-0orou %b=addtag Menu;   %b=addtag -text='!'$; )0|b z-m z@i|r0b|)0
  z@m0b-i|z-m0r0i/ /|b
  i|%%Set window size to allow 1 line for the console area one for the static window and 10 for the debugger/compiler monitors.|b
  i|%q$=window; f/screenHeight = /-oidol24o- f/screenWidth = /-oidol40o-ol40|b
%%  i|%q$=window; f/screenHeight = /-oidol14o- f/screenWidth = /-oidol40o-ol40|b
  i|%w=new -clear;|b
  i|%w-=new -height=1 -menu;|b
  i|%w@=new -height=11 -width='~ -delim; %wl=new -width='~+1 -delim;|b
  i|%w=new -height='~ -delim;|b
 )
  
:
'#

%%Define mouse-click function for code repository.
%g$
%%  <<on_key_function>>
%%  %%Called after every user command - currently only maintains the delimiter bar.
%%  %%
%%  ob zlm0 ozob
%%  ( %q=samesinceio;  %%The text is either unmodified or has been saved.
%%    %q$=buffer; f/ pathName = /-b oz %b=footer '$   [Unmodified];
%%  , %%The text has been modified.
%%    %q$=buffer; f/ pathName = /-b oz %b=footer '$   [Modified]; )

<<gdbM1_Save>>
%%Menu-driven replacementfor %O command.
%%If using index.jot or tags_index.jot look up the buffers to be saved, otherwise save only ( . ) - the primary buffer.
%q=samesinceio;?
obz.
( oq/.=Files/\ oz     %%Data buffer ".=Files" is not set up - just save the current buffer.
  %o;
  , %%Check each buffer registered in ".=Files" and save it if necessary.
  z~ %q@=keys; okm2
  %%Buffer loop - write out any modified source-code buffers.
  ( f/key /-n.f/, (DataObj)/a$& z$r-0i/.=Files|/oq'$z~ ( %q=samesinceio;, %o; ) z@ok )0 )
%%  z~ %q@=keys; m2
%%  %%Buffer loop - write out any modified source-code buffers.
%%  ( f/key /-n.f/, (DataObj)/a$& z$r-0i/.=Files|/oq'$z~ ( %q=samesinceio;, %o; ) z@ok )0 ok )
oz

<<gdbM1_Compile>>
%%Abandon the compile operation if file image has not been saved - first count no. of unsaved files.
obz. ( oq/.=Files/\ oz ( %q=samesinceio; ol0, ol1 )
  , %%Check each buffer registered in ".=Files"
  z~ %q@=keys; okm2
  %%Buffer loop - write out any modified source-code buffers.
  ( f/key /-n.f/, (DataObj)/a$& z$r-0i/.=Files|/oq'$z~ ( %q=samesinceio;, %o; ) z@ok )0 )
%%  z~ %q@=keys; ok ( f/key /-n.f/, (DataObj)/a$& z$r-0i/.=Files|/oq'$z~ (t %q=samesinceio; z@ok, z@okol1o+ ) )0 osoz )
(ol0o=ok, ok %x=One or more files require saving.; )
%%
(%q=samesinceio; %m=Compiling.;, %x=Error: File has been modified but not saved.; )
%%If the user has defined a gdbCompile function then use that, otherwise make we it up as we go along.
obo# (z' %q$=keys -key=gdbCompile;   %%The user-defined compile function exists - call it now.
%%obo# (z' %q$=key gdbCompile;   %%The user-defined compile function exists - call it now.
  oz %h'=call gdbCompile;
, %%No user-defined compile function - use the default.
  (oq/.=winNotLin/ ol0o=  %%Use gcc.
    %%Pick up source-file pathname and apply that to gcc.
    ( ok oq/.=sourcePath/ z$m-0k0h~ok (r0f-1"/"ei/ \; gcc -g /r-0i/%e@= ( cd /, r-0i/gcc /) oq/.=linExePath/r0i/ -o /i'~oki/);/ '$, )
  , %%Not gcc - use wineconsole and cl.
    %%Pick up source-file pathname and apply that to cl.
    ( ok oq/.=sourcePath/ z$m-0k0h~ok (r0f-1"/"ei/ \; wineconsole cl /r-0i/%e@= ( cd /r0i/ );/, r-0i/wineconsole cl /r0i/; /) '$, ) )
  oq/.=separator/ z~r-0f1/[/-n.f1/]/a$i/Compiled/ osoz %b=footer '~; )
oz %m=Done Compile.;

<<gdbM1_Run>>
%%Simply runs the executable as a subprocess.
%m=Running directly in a subprocess.;
ob (z' %q$=keys -key=gdbRun;   %%The user-defined run function exists - call it now.
%%ob (z' %q$=key gdbRun;   %%The user-defined run function exists - call it now.
  oz %h'=call gdbRun;
, %%No user-defined run function - use the default.
  (oq/.=winNotLin/ ol0o=  %%A linux executable.
    oq/.=linExePath/ z$m-0k0i/%e@=/h~ok '$ 
  , %%use wine.
    oq/.=linExePath/ z$m-0k0i/i/%e@=wineconsole /h~ok '$ 
    ) )
okoz

<<gdbM1_dbg_start>>
%%Start the relevant debugger.
%%
%%If user a has defined gdbDebug function then use that, otherwise use the default, below.
%%
  ob(z' %q$=keys -key=gdbDebug;   %%The user-defined run function exists - call it now.
%%  ob(z' %q$=key gdbDebug;   %%The user-defined run function exists - call it now.
  %h'=call gdbDebug;
, %%No user-defined run function - use the default.
  (oq/.=winNotLin/ ol0o=  %%Use gdb.
    ok %m=Running under gdb.;
    %%If buffer ( L ) does not have an interactive gdb running then start one now.
    zl %q$=buffer; (f/ InPipe = /, %el= -interactive gdb; )
%%    zl %q$=buffer; (f/ InPipe = /, %el=&gdb; )
    (o#oz %q$=buffer; f/ pathname = /-b-k-0mk0 r0(f-1"/"-, r-0) e0i/a.out/r-0i/file / %pl='$;
  , %%Use winedb in windowsland.
    ok %m=Running under winedb.;
    %%If buffer ( L ) does not have an interactive winedbg running then start one now.
    zl %q$=buffer; (f/ InPipe = /, %el= -interactive winedbg; )
%%    zl %q$=buffer; (f/ InPipe = /, %el=&winedbg; )
    (o#oz %q$=buffer; f/ pathname = /-b-k-0mk0 r0(f-1"/"-, r-0) e0i/a.out/r-0i/file / %pl='$; ) ) ) )
zlm0 oz

<<gdbM1_dbg_run>>
%%Run executable under control of the debugger.
%%If buffer ( L ) does not have an interactive gdb running then exit now.
obzl %q$=buffer; (f/ InPipe = /, %x=No debugger session has been started - first you must press the start button; )
(oq/.=winNotLin/ ol0o= ok %pl=run;, ok %pl=continue; )
oz

<<gdbM1_dbg_continue>>
%%Continue from breakpoint.
%%If buffer ( L ) does not have an interactive gdb running then exit now.
obzl %q$=buffer; (f/ InPipe = /, %x=No debugger session has been started - first you must press the start button; )
(oq/.=winNotLin/ ol0o= ok %pl=continue;, ok %pl=continue; )
oz

<<gdbM1_dbg_break>>
%%Set breakpoint.
%%If buffer ( L ) does not have an interactive gdb running then exit now.
obzl %q$=buffer; (f/ InPipe = /, %x=No debugger session has been started - first you must press the start button; )
ozon %pl=break &'~;

<<gdbM1_dbg_command>>
%%Prompt string: Debugger command> 
%%Relay user-specified command to debugger.
obzl %q$=buffer; (f/ InPipe = /, %x=No debugger session has been started - first you must press the start button; )
%%If buffer ( L ) does not have an interactive gdb running then exit now.
oz %pl='$;

<<LeftClick>>
%%Defines the left-button-click mouse event handler.
%%On a left-button click on tagged text in the menu buffer ( - ), query tags at the mouse-click point to pick up a function name
%%then call the function.
%%
%%In system mode, users default strings are unaffected, get and check the mouse-click coordinates.
%s=system 1; obopobos
%%
( z-obo=
  %%It's the menu buffer alright, move to mouse-event point.
  okokono-omor %q!=tags -here; 
  %%Pick up the function name from the text tag.
  ( f/Type text from chr /f1/ = "/-b(f1/<</-b, )(f1/>>/, f1/"/)b-
  %%Clear all but static menu bars from menu buffer.
  z-m-0 (v/+/\k, m)0
  %%If the function takes a parameter, prompt and pick up value.
  %h'=jump '!; m ( f1/%%Prompt string: /-n.r0a$& %s=prompt '$; z$m-0k0g1k- %s=prompt > ;, )
  %%Call the function.
  %s=system 0; oz (%h'=call '!;)? ob %s=system 1; )
, %%Event was not on a valid clickable menu point - restore menu to original state.
  (ok)4 z-m-0(v/+/\k, m)0 )
  
oz %s=system 0;

%%Functions for the "gdbM1_File" menu bar.
<<Reload>>
%%Re-reads the current buffer.
%m=Re-reading the source file.;
obo#n.a$& z$oo/%%i%c/ oz'$

<<Abandon>>
%a=Session abandoned.;

<<SaveAs>>
%o='$;

<<SaveAndExit>>
%c;

:
z@m-0h$

%%Disable {Button1Up}, {Button1Down} ... events.
%g$
{Button1Up}
{Button1Down}
{Button1Click}%h'=call LeftClick;
{Button1Down}%d$=##; %h'=call LeftDown;
{Button1Up}%d$=##; %h'=call LeftUp;
wg          ob %h'=call gdbWindows; oz
:
z^m-0h$b

%h'=call AddNewFunctions;

%%Enable left-button clicks.
%s=mousemask 0004;

%h'=call gdbWindows;

%%  %%The on_key routine.
%%  %s=on_key %h\\'=call on_key_function\;;

%%The top of stack is still pointing back to buffer ( s ), remove that now and replace with buffer ( . ).
z.okok n.a@&


