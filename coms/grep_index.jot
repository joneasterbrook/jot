%%Reads sections of a large file using hashtables and an index file generated by grep -b <LargeFileName>.

%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%
%%History

%g?
  Usage:
    First create an index file with grep -b
$ grep -b LargeFilePathName > LargeFilePathName_index.txt
    Now start the editor with grep_index.jot
$ jot /dev/null -in="%r=grep_index -file=LargeFilePathName;"
  
  Command-line args:
    -file=<pathName> - Mandatory pathname to big file, index file must be <PathName>_index
    -size=<n> - Optional, defaults to 100,000 - aproximate size of hashtable
   
  Buffers used:
    7 - macro 7, launches a dictionary query.
    8 - macro 8, launches a net-name grep and loads matching subcircuits.
    $ - temporary, used for args, setup and queries.
    # - temporary, only used at dictionary-setup time.
    ! - CLI args:
      - Line 1 - Destination buffer - the current buffer when the script was started.
      - Line 2 - From -size= qualifier, hashtable size - defaults to 100,000
      - Line 3 - From -file= qualifier, pathname of large file.
      - Line 4 - From -index= qualifier, pathname of index file.
:

%g#
%%
%%Prepare ! buffer and note the original buffer
n.a! obz!oo/%c/b4
%%
%%Pick up mandatory -file=<pathName> arg and check the file exists.
z!m+3 z$r-0 (f/-file=/s/ /n.(f1/ /, r0)a!., %X=Error: No -file=<pathname> arg - cannot continue.;)
( %q=file '!;, %m=Error: file '! not found.; )
%%
%%Pick up optional -size=<noOfHashTableEntries> arg.
z!m+2 z$(r-0f/-size=/s/ /n.(f1/ /, r0)a!., z!i/100000/)
%%
%%Pick up name of index file or default to <bigFileName>_index
z!m+4z$r-0(f/ -index=/s/ /n.(f1/ /, r0)a!., z!m-n.r0a_&mh_i/_index/)
(%q=file '!;, %x=Error: Index file "'!" does not exist.;)
%%
%%Check for unrecognized qualifier keys.
z$r-0(v/ /e)0(r\, oz%x=Error: Unrecognized qualifier '$; )
%%
%%Clear ( $ )in preparation for index-build operation.
%d$=Initial_gumph;
%%
%%Read the index file
z!m+1oic m+2 oz %h=create '!; 
%%Define the filter macro.
%d*=o#oidoso- (%h=setseek \\'$\;, r-0b-i/Failed to add section /h$m) o+ f1/:/-n.r0a$& k?;
%%  %d*=o#oidoso- (%h=setseek '$\;, r-0b-i/Failed to add section /h$m) o+ f1/:/-n.r0a$& k?;
%%Read now.
ol0 z!m+1oic m+4 oz %i='! -filter='* -noinit;?
%%Add the last entry, this requires the total size of the file in order to calculate the section bytecount.
z!m+3 %q@=file '!; f/ size = /- o#oidoso- z!m+1oicoz (%h=setseek '$;, r-0b-i/Failed to add section /h$m) okokok
m-0r\m(m %x=Error: there were some errors while building the hashtable from the index file;, )

:

%g7
%%Macro to launch a query.
%%
%%Pick up buffer key and pathname
z!m+1oic m+3 oz m0on
( %i='! -section='$ -append;
  %%Read success - change original SeekObj entry to a conventional HtabObj.
  ono-omm-r0b2i/------------------------------------------ /h$r-0
  %%Replace SeekObj with HtabObj pointing at the start of the newly-read section.
  %h=add '$;
  %%get top of new section at top of view.
  wm*w %h=jump '$;
, %%Read failure.
  ok ( %h=jump '$; wm*w %h=jump '$; , z!m+1oicoz %X=Error: Section '$ is not in the index.; ) )
:

ob'# oz

