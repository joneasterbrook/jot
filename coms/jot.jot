%%Sets up buttons specific to editing jot command files.

%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%

%g?
jot.jot: help
Optional qualifier:
  -noinvalid  - ignore invalid jot command characters, just skip to the next line.
  
Buttons:
  {KP_1}       - From a ')', find matching '(' from a ',' find previous case clause or start of parent block.
  {KP_2}       - From a '(' then find its matching ')', from a ',' find next case  clause or end of parent block.
  <cmd>{KP_3}  - Find next instance of the command. 
  {* KP_3}     - Find any unterminated string specifications. 
  KP_4         - Visit the next place mentioned in the  ( @ ) buffer.
  
Buffer usage: 
  1 - The '1 macro, Find previous ')', go to it's matching '(' using hash tables.
  2 - The '2 macro, Find next '(', go to it's matching ')' using hash tables.
  3 - The '3 macro, search the current buffer, from current chr, for command given in arg.
    Macro 3 searches current buffer for syntax errors and matches to  a  given
    command sequence, reports are also logged in the ( @ ) buffer.
  4 - The '4 macro - maps first occurence of specified command in a cat listing of all command scripts.
  5 - The '5 macro - reads current file to buffer !
  6 - The '6 macro - goes to line and character indicated by current entry in @ buffer.
  $ - Temporary - used to traverse string arguments.
  ! - Temporary - Holds a simplified version of the current buffer (macro  4).
  @ - Temporary - used at hashtable setup time.
:

obz$m-0(f/-noinvalid/ol1, ol0)osoz
  
%%reset verbosity.
%s=verbose 3;

%g$
<<JotSetupHashtables>>
%%This procedure used by macros 1 and 2 - 
%%when any change to anything in the source is detected, it rebuilds the hashtable entries for the current programme module. 
%%
%%Indexing works by placing the line no. and chr no. on the stack for each '(' encountered.
%%When a ')' is found the positions of the start and end points are at the top of the stack, these are then
%%logged into the hashtable giving the forwards link, The backwards link is made later using the forwards links.
%%Uses buffer $ as a temporary text stack for pending keys - as values are popped they are not destroyed, 
%%they will be used later to build the reverse index.
%%
( %q=samesinceindexed;, 
  %%Code has changed since index was built - destroy the old index.
  %m=Rebuilding the hashtable. 
  %%
  %h=destroy;
  %%For the code-repository buffer ( ' ) restore the entry-point index.
  ( obol39o= okm-0 ((v/<</\m)0 mm-r2n.f1/>>/a$& %h=addjump '$; )0 , ) ok
  %%Create a hashtable of roughly the right size, allow for 100 macros.
  ol0m-0 (f/(/o~)0 ol2o*ol100o+ %h=create -adjust '~; )
%%
%%
%%Find start and end of current sequence (a macro, a procedure or just a series of commands in a file image.
%%The start of a procedure is assumed to be the top of the buffer, a %g command or a <<routineName>> tag, 
%%the end is assumed to be the ':' terminator for %g, a %g command or the end of the buffer.
%%
( %%Go to start of module and enter start point - this acts as an endstop and fails if routine is already indexed.
  ono-omor oconob ((v/ /r)0(v/%g/\ v/<</\) m-)0
  %%Register/check registration of this routine.
  (on %h=newjump macroStart_&'~; on %m=Adding macroStart_&'~; pm )
  %%
  %%This module was previously unregistered - locate and index the block start and end points.
  %%
  %%Clear the text stack. 
  n.a$& z$b-o#oz
  %%
  ( %%Main parsing loop
    ( %%Parser case block.
      %%If a '(' Add entries to stack.
      v/(/oconz$r0bi/blockStart_/r-roo/%d/i/_/r-roo/%d/o#ozr,
      %%If a ')' make the key using the start-point on the stack then add the entry.
      v/)/ %h=addjump '$; z$(m-, (m, x0) o#oz %m=surplus end brace here:; p?x0)  o#ozr(q/0-9/r)0,
      %%For percent commands, skip to end of last continuation line or terminating semicolon.
      v/%/ ( v/%%/r0, r3 ( (f1/;/\r0v-/&/m)0 (v-/\/ (ol0 (v-/\/r-o~)0ol2o%ol0o=\okf1/;/r) ) )0 v/;/\r0, r),
      %%Simple commands (some have numeric argument).
      q/bcegjkprtxyBCEGJKPRTXY?\/ r(q/-0-9-/r)0,
      %% Commands with string argument.
      q/fiqsvFIQSV/(r(q/-0-9/r)0 (v/'/r2, n.ra!&f1'!-, m?) (q/-0-9/r)0 ),
      %%Commands with a buffer-key argument.
      q/ahuzAHUZ/(v/a/(r2q/+-./r)? (q/&/r)?, v/h/r2(q/0-9/r)0, r2),
      %%Operand-stack commands.
      q/oO/r(q/lL/r(q/-.0-9/r(q/.0-9/r)0, q/xX/(q/0-9a-fA-F/r)0, q/cC/r2), q/iI/r2, q/oOvVqQ/ rn.ra!&f1'!-, r),
      %%Move command.
      q/mM/r(q/=+*/r,)(q/-0-9/r)0,
      %%Note.
      q/nN/r(v/./r,),
      %%Invalid alphanumerics.
      q/dDlLxX/ onp %m?=Invalid command character at line &'~; r(q/0-9/r)0,
      %%Else i.e. comma. 
      v/,/ r,
      %% `'`
      v/'/r2,
      %%Skip any whitespace.
      v/ /(rv/ /)0
    , %%An invalid command character.
      onocr-0n.r0a@&r-0o#or obosz@ori/[/ri/]/ozr %m?=Invalid command character at line &'~&'@$; )
    %%Skip past comments and whitespace-only lines.
    ( (v/ /r)0 ( v/%%/, (r\, r-\) ) (m, r0x3) )0 
    %%If it's a new line check for end of module.
    (r-r, (rr- v/:/\ v/<</\ (v/ /r)0v/%g/\) ) )0
   
  %%Add an endstop marker - this stops queries wandering off into adjacent modules (or hyperspace).
  ( (v/<</\ v/%g/\), m-) on %h=newjump macroEnd_&'~;
  %%Now construct the reverse index using the list of keys in $ buffer.
  z$m-0mo#ozn.a;&
  ( %%Block loop - constructs the blockEnd_ links for each blockStart_ in the index.
    %h=jump '$; oconn.a@& z@i/blockEnd_/r-roo/%d/i/_/r-roo/%d/ z$f1/_/-2oidosr-0f1/_/-oidos o#oz osono-omosor %h=newjump '@; z$mrr-o#oz, z;i'$bz$mro#oz)0
  %%Report any unmatched block start points.
  (z;m-0rr- (f/blockStart_/s/ '(' at line /f/_/s/ chr no. /m)0m-0 %x=Error the listed block-starts could not be matched;, ) o#oz
  )?
     
%%Resume original focus.
okono-om or
:
ob z'm0bh$b (m-v/<</\)0 r2n.f1/>>/a$& m %h=code '$; oz
%d$;

%g1
%%Searching back, match next valid ')' with it's start-point '(' from hashtable.
%%
ocon
%h'=call JotSetupHashtables;
%%
%%Identify current position and prepare list of keys to find the next end point in the hashtable.
( %%If we're already at a block end-point then just launch a hashtable lookup to go back to the start point.
  obocon n.a$& z$oo/blockEnd_%d/ r0oo/_%d/ o#oz %h=jump '$; ok
, %%Not at an end point search back for next one.
  ocon %q$=keys; k2(f/ blockEnd_/k)0 m-0(f1/line no./-oidoo/	%04d/f1/chr no./-oidoo/	%03d/m)0 %b=tabsort 1 2; m0r0b
  %%First delete all entries after current line then all those before start of current code block.
  m0m- (f1/	/-\k-, oido<k-)0 f-/ macroStart_/k-0 m0r0b-
  %%Search back for block-end point by matching line numbers and chr positions in blockStart entries.
  ( m0m-\ %%No block-end points found - exit now.
    okokoz
  , %%Find correct end point.
    ((f1/ blockStart_/\k)0(f/	/-oido<m-)0 r-4oido=os f1/	/-oido<osk-)0
    %%Refocus to block-end point.
    okok (r-0f1/	/-oidos f1/	/-oidos ozosono-omor, oz) ) )
:

%g2
%%Searching forwards, match next valid '(' with it's end-point ')' from hashtable.
%%
ocon
%h'=call JotSetupHashtables;
%% 
%%Identify current position and prepare list of keys to find the next start point in the hashtable.
( %%If we're already at a block start-point then just launch a hashtable lookup to go to the end point.
  obocon n.a$& z$oo/blockStart_%d/ r0oo/_%d/ o#oz %h=jump '$; ok
, %%Not at a start point search for next one.
  ocon %q$=keys; k2(f/ blockStart_/k)0 m-0(f1/line no./-oidoo/	%04d/f1/chr no./-oidoo/	%03d/m)0 %b=tabsort 1 2; m0r0b
  %%First delete all entries before current line then all those after end of current code block.
  m-0 m-0(f1/	/-\k, oido>k)0 (f/ macroEnd_/k0,) m-0(f/macroStart_/k)0 m0r0b
  %%Search for next block-start point by matching line numbers and chr positions in blockEnd entries.
  ( m-\ %%No block-start points found - exit now.
    m-0okokoz
  , %%Find correct start point.
    m-0 ((f/	/-oido>k)0 r-4oido=os f1/	/-oido>osk)0
    %%
    %%Refocus to block-start point.
    okokr-0 (f1/	/-oidos f1/	/-oidos ozosono-omor, oz) ) )
:

%g3
%%Plods through valid jot commands until it encounters one of the following:
%%  - A macro end mark i.e  a colon ( : ) - (indicates the end of a %G macro definition),
%%  - a new function definition i.e a "<<" at the start of a line - this terminates the current function definition,
%%  - the end of the buffer - also the end of the macro.
%%
%%Acts as a sanity check on jot code, optionally searching for given command.
%%
%%Starting from current character position, detects the following errors and builds a report in buffer @.
%%  - Unterminated strings.
%%  - invalid command characters.
%%
%%  By default it scans all files with pathnames in the current buffer.
%%  With a command string defined the commands are executed at each new command.
%%    For example:
%%      v/w/{Esc 3}                                         -- detects and prints line for W commands.
%%      (v/w/ocon %m@=Found W at line &'~&:&'~; , ){Esc 3}  -- detects and reports position for W commands.
%%      (v/w/s/%w=;/ %o;, )){Esc 3}                         -- detects W commands and changes them to %w=; and writes the modified file.
%%
%%  E.g: Scan a whole directory-full of scripts like this:
%%    jot_dev -in="%r=jot.jot; %eq=ls ${JOT_HOME}/coms/*.jot; ( %iw='q; %d$=(v/%w\\;/s/%w=refresh\\;/ %o\\;, ); '3 zqm)0"
%%      This reads every script and sniffs out any simple %w; command, changing these to %w=refresh;
%%        - The ( q ) buffer contains the list of pathnames,
%%        - the ( w ) buffer contains the latest script,
%%        - Each iteration defines the command string to be (v/%w;/s/%w=refresh;/ %o;, )
%%
%%  Buffer usage:
%%    $ - the user-supplied command string.
%%    ! - The main command string.
%%    @ - the report buffer.
%%
%%To avoid false calls due to messages etc. and informational ( ? ) buffer 
%%definitions, it has a few tweaks for searching macros defined by %G commands.
%%  - It rejects any %G that does not contain a jot comment starting at the begining of the line.
%%  - it allows colons ( : ) and ignores them.
%%  - It skips past function headers: <<FunctionName>>
%%
%%Initialization.
%%
%%Set up search-for-command macro.
obn.a!& z!i'$b
%%Add commands to ignore Bill's folly.
z!r0i/ /r0ol13oo" (v/%c/(rrr-, m), )" oz
%%Reset line and character counters.
ol0 ol0
  
%%Plod through commands.
( ((v/ /r)0 rr-, (oso~osm\ os 
    %m@=Checking complete &'~& errors reported in buffer @.;
    %m@=End of file.; x3 ,v/:/\ (v/ /r)0r\)0r-)
  %%Have we found a matching command?
  '!
  %%Check next character - move to next line if it looks like the end of a macro definition of a new function definition.
  o~(q/ a-zA-Z(),\%?'/, v/<</(r-r?\,) r0v-/>>/, 
    ocr-0n.r0a$&obosz$r-0o#ori/[/r?i/]/osozr-0oron %m@=Invalid jot command character at line &'~&:  ; obz@r0h$oz m ,  )
  %%
  %%For percent commands, skip to end of line or terminating semicolon.
  v/%/ ( v/%%/r0, r3 ( f1/;/ (v-/\/ (ol0 (v-/\/r-o~)0ol2o%ol0o=\okf1/;/r) ) )0 v/;/\r0, r),
  %%Simple commands (some have numeric argument).
  q/bcegjkprtxyBCEGJKPRTXY?\/r(q/-0-9/r)0,
  %% Commands with string argument.
  q/fiqsuvFIQSUV/(r(q/-0-9/r)0 (v/'/r2, n.ra$&f1'$-, 
    ocr-0n.r0a$&obz$oso#orr-?i/[/r?i/]/osozr-0oron %m@=Unterminated string starts at line &'~; obz@r0h$oz m) (q/0-9-/r)0 ),
  %%Commands with a buffer-key argument.
  q/ahuzAHUZ/(v/a/r2(q/+-./r,)(q/&/r,), v/h/r2(q/+-0-9/r)0, r2),
  %%Operand-stack commands.
  q/oO/r(q/lL/r(q/-.0-9/r(q/.0-9/r)0, q/xX/(q/0-9a-fA-F/r)0, q/cC/r2), q/iI/r2, q/oOvVqQ/ r(v/'/r2, n.ra$&f1'$-), r),
  %%Move command.
  q/mM/r(q/=+*/r,)(q/-0-9/r)0,
  %%Note.
  q/nN/r(v/./r,),
  %%Invalid alphanumerics.
  q/dDlLxX/ 
    ocr-0n.r0a$&obz$oso#ori/[/r?i/]/osozr-0oron %m@=Invalid command character at line &'~& ; obz@r0h$oz r(q/0-9/r)0,
  %% `'`
  v/'/r2,
  %% ( , and )
  q/(,/r, v/)/r(q/0-9/r)0, 
  %% : - appearing at the end of %G buffer definitions.
  v/:/(r-r)\ rr\, 
  )0
(v/(/r, )
%%  (v/(/(rq/0-9/)0, )
ok
:
  
%%If -noinvalid qualifier was given then nobble those %x=Invalid jot command character; commands
ol1(o= ob z1m-0(f/%x=Invalid jot command character/i/m, /r)0 z2m-0(f//i/m, /r)0 z3m-0(f//i/m, /r)0 oz, ) ok

%g5
%%Macro 5 - reads current file to buffer &
%s=verbose F;
z@r-0n.f1/ line /a$& %i&='$; %b=writeifchanged;
:

%g6
%%Macro 6 - goes to line and character indicated by current entry in @ buffer.
%%Uses buffer & to hold file image, if currently holdes designated file then goes to indicated line and character, otherwise fails.
%s=verbose F;
z@r-0n.f1/ line /a$&z& %q~=buffer; f/pathname = /- 
(v'$ %%It's the right file image.
  %%Pick up line and chr no.s
  z&okz@r-0f1/ line /-oidf1/, chr /-oidosm
  %%go to specified place in file image.
  z&ono-omor
, z& %x=File is not &'$; )
:

%g7
%%Macro 7 finds next error-line reported in buffer ( @ ) and goes to that line in text, reporting file name.
%%Go to next error line line.
obz@f/at line /- oid ozono-om
%%Assuing we're looking at the output of "multi_do cat" pick up file name.
onf-/%%-------------------------------------------------------------- /-n.r0a$&
%%Return to error line and report file name.
ono-o#om obosz$r0oo/, at line %d/oz %m=This translates to file &'$;
:

%g8
%%Macro 8 reports percent commands wiith indirect references.
%%
%%This setup is designed to locate instances of indirect references in percent commands.
%%Initialize.
n.a?& n.a@&
%%
%%The test macro is deined this way to avoid loads of complicated escapes.
%d$ -LITERAL_DEFINITION ( v/%/ v/%%/\ (oco# (r3( f1/;/\, (ol0 (v-/\/r-o~)0ol2o%ol0o=\okf1/;/r)0 ok) v/;/\r0, r) ocosr-0n.r0a@&r-0o#oron %m?=Found, at line &'~&:&'~&-&'~& "&'@&";, ) r-0or, ) -BUFFERDEFINITIONENDSHERE;
'3
%%
%%Go
%%
%%Now remove any report lines that do not contain indirect references.
ob
z?m-0 (onf1/:/-oidroid r2 oco+osoco+ol3o+ %f= -startchr='~ -endchr='~ -endline='~ \\';\k, m)0
m-0
%%  
%%Redefine macro 1 - now finds next indirect reference,
%%This assumes the result is in buffer ( Q ):
%d1=z?mf/Found, at line /-oidroidoszqono-om onf-"----------------------coms/"-r-5n.r0a$\&ono~ %iz='$\; %b=writeifchanged\; o-omor;
:

