%%Defines the hot-key functions, these are mapped onto escape sequences by keybord/os-specific keyboard map.
%%
%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%
%%Buffers used/defined.
%%  ^ - the hotkey translation buffer, defined from scratch or left unchanged.
%%  : - The help repository, initialized to the contents of the top help file, also used as temporary key-functions buffer.
%%  @ - temporary, holds keycap-to-keycode translation.
%%  $ - temporary, used in construction of some key functions and resolution with keycodes.
%%
%s=trace 0

%w

%%Read the relevant keyboard map file.
%g$
z^m-0
( %q=windows;
  %r=WindowsNT_keys;
, %%unix then.
  %q$=version; kf/ ncurses /- e-0i/%r=curses_keys_/ (f1/./s/_/)0 r0i/;/ '$
, %x=Error: Unknown ncurses version.; )
:
'$

%%Delete any unused key mappings and trim off the key-mapping commentry.
z@m-0(f1/>>/-e0m, k)0
%%Set window size to be 4 less than screen height.
%q~=window; f/screenHeight = /- oidol4o-z.osok
%w '~; %w 0; w

%%Set up the functions and assign function names
%%N.B. At startup time this will be run in case-insensitive mode
%%If run later, case-sensitivity might have been turned on.
%%
%%In the forgoing, single-line functions are copied directly into the keymap buffer ( ^ ).
%%Multi-line functions are copied into the code repository buffer ( ' ) and a function-call
%%entry point is set up ine the hashtable.
%%For functions that need to prompt for parameter values, the prompt string 
%%must be in a line-1 comment of the form:
%%Prompt string: <string>
%%
%g'
<<Do>>
%r=##"Command file pathName> ";
<<Substitute>>
s`##"Substitute string> "
<<SubstituteBack>>
s-`
<<Remove>>
(s/ /e-)
<<SubstituteInd>>
s'_
<<SubstituteAgain>>
s
<<Insert>>
i`##"Insert string> "
<<InsertBack>>
i-`##"Insert string> "
<<InsertAgain>>
i
<<Overwrite>>
oci`##"Overwrite string> "`oco-(eo~)0ok
<<OverwriteBack>>
ocr0ocosr-0o#ori-`##"Overwrite string> "`r0osoco-osr-0or(e-o~)0ok
<<FindPrev>>
f-`##"Find string> "
<<SubsThenFindPv>>
s-//f-//
<<FindPrevInd>>
f-'_
<<FindPrevAgain>>
f-
<<FindNext>>
f`##"Find string> "
<<SubsThenFindNx>>
s//f//
<<FindNextInd>>
f'_
<<FindNextAgain>>
f
<<DeleteLineLeft>>
(n.(r-r(rr-0, m-r0)?, m-r0) a%-)
<<RestoreLineLeft>>
obz%m-0n.(rr0,m,)a$ozh$
<<DeleteWordLeft>>
(n.(r-r, m-r0)(q-/a-zA-Z0-9/\r-)0 (q-/a-zA-Z0-9/r-)0 a%-)
<<RestoreWordLeft>>
obz%m-0n.(r(q/a-zA-Z0-9._/\r)0(q//r)0,m,)a$ozh$
<<DeleteWordRight>>
(n.(rr-,m)(q/a-zA-Z0-9/\r)0(q/a-zA-Z0-9/r)0a%+)
<<RestoreWordRight>>
obz%m0r0n.(r-(q-/a-zA-Z0-9._/\r-)0(q//r-)0,m-r0,)a$  o#ozh$(z$r o#ozr-,m o#ozm-r0)0 oz
<<DeleteLineRight>>
(n.(rr-(r-r0,m),m)a%+)
<<RestoreLineRight>>
obz%m0r0n.(r-r-0, m-,) a$o#ozh$z$m0r0 (z$r-o#ozr-,m-r0o#ozm-r0)0oz
<<FindExactNext>>
(f`##"Find-exact string> "`(q-/_A-Za-z0-9/r?,rr-f1//-q/_A-Za-z0-9/))0f-1//
<<FindExactPrev>>
((f-`##"Find-exact string> "`q-/_A-Za-z0-9/ (r-, m-r0))0 v//rr-f1//-q/_A-Za-z0-9/ (v-//, m-r0) f-//rr-)0 v-//
<<SetFindString>>
(a$&, r-r(q-/_a-zA-Z0-9/r-)0n.(q//r)0a$&, n.r0a$&)obz$r-0i-/f-1`/oz'$
<<Paste>>
(h_)
<<PasteOver>>
(h_*)
<<PasteGraphic>>
ocobz_m-0oz (obz_n.r0a$h$mozh$*mo#or)0 ozok
<<Cut>>
a_
<<CumulativeCut>>
(a_+, r-0n.ma_+&)
<<CutTabular>>
a_*
<<CumulativeCopy>>
(a_+&, r-0n.ma_+&)
<<Copy>>
oba_&
<<Note>>
n.
<<PageUp>>
(m*-w)
<<Home>>
m-0
<<GotoFoldStart>>
ol0r-0(f1/}}}/\m-)0r-0 (f1/}}}/ol1o-m-,f1/{{{/\m-,o~m-)0 ok
<<PageDown>>
(m*w)
<<StretchWindow>>
%w=+1; %l
<<ShrinkWindow>>
%w=-1; %l
<<ViewSave>>
oe(rr-,)oe(o=okol0, o#ou) oc wof on ob
<<ViewRestore>>
oz ono-om wofo-ow or ou
<<End>>
m0m-
<<GotoFoldEnd>>
ol0r-0(f1/{{{/\m)0r-0 (f1/{{{/ol1o-m,f1/}}}/\m,o~m)0 ok
<<Up>>
(m-)
<<StraightUp>>
(y-)
<<ViewUp>>
(ol1ow)
<<CmdLineEdit>>
ob %d$=##; z$b2m-oo/In buffer %c/mr0b2m-2
<<CmdEditStart>>
ob%q$=history; m-0mb-oo/In buffer %c/m0m-2
<<CmdEditEnd>>
obol36 (o=okmk0m+2f1/In buffer /-oicm0m-2k-0 oz'$, ok %x=This is not the correct command-history report.; )
<<Down>>
(m)
<<StraightDown>>
(y)
<<ViewDown>>
(ol-1ow)
<<Right>>
(r\m,r-r)
<<Left>>
(r-\m-r0,rr-)
<<LineRightUp>>
(rr0,m-r0)
<<LineLeft>>
r-0
<<ParenMatchLeft>>
v/(/r-, ol0(v.*/.f-./*.,v/"/(r-f-1/"/v-/*/)0r-,v/'/f-1/'/r-,q/)/ol1o-r-,q/(/\(r-,m-r0),o~r-)0ok
<<CurlyMatchLeft>>
v/{/(r-,m-r0), ol0(v.*/.f-./*.,v/"/(r-f-1/"/v-/*/)0r-,v/'/f-1/'/r-,q/}/ol1o-r-,q/{/\(r-,m-r0),o~r-)0ok
<<AngleMatchLeft>>
v/</(r-,m-r0), ol0(v.*/.f-./*.,v/"/(r-f-1/"/v-/*/)0r-,v/'/f-1/'/r-,q/>/ol1o-r-,q/</\(r-,m-r0),o~r-)0ok
<<MarkupMatchLeft>>
v/</\f-/</, (v"</", f-"</")r2n.f1/>/a$& (f-/</-2(v/ /r)0(v'$\, (q/ >/\r)0v-'$\))0 f-/</
<<LineRight>>
(rr0, i/ /)
<<ViewLeft>>
%q=inview;? okoko~%b=leftoffset '~;
<<ViewRight>>
%q=inview;? okokol0(o>\okol0, ol-1o+) %b=leftoffset '~;
<<WordLeft>>
(%q=tabstops; ((v-/	/, f1//-, r0)oc (f-1//r, r-0)oc o~o-ou)?, (r-, m-r0)(q-/a-zA-Z0-9/(q//r)0, (q-//\r-)0) oc (q-//r-)0 oc o-ou) (%q=inview; okokok, osokosokol1o- %b=leftoffset '~;)
<<WordRight>>
(%q=tabstops; (r?r-(f-1/	/-, r-0)oc (f1//, r0)oc o-ou)?, (r, m)(q/a-zA-Z0-9/(q-//r-)0, (q//\r)0) oc (q//r)0 oco-ou) (%q=inview; okokok, oso-osokoeoko+ %b=leftoffset '~;)
<<WordDown>>
(%q=tabstops; yocr(f1/	/, r0)oco-o#orol0oso-ou, y) (%q=inview; okokok, osokosokol1o- %b=leftoffset '~;)
<<WordUp>>
(%q=tabstops; y-ocr(f1/	/, r0)oco-o#orol0oso-ou, y-) (%q=inview; okokok, osokosokol1o- %b=leftoffset '~;)
<<ParenMatchRight>>
v/)/r, ol0(v./*.f.*/.,v/"/r(f1/"/v-/*/r)0r,v/'/f1/'/,q/(/ol1o-r,q/)/\(r,m,okol-1?\),o~r)0ok
<<CurlyMatchRight>>
v/}/(r, m), ol0(v./*.f.*/.,v/"/r(f1/"/v-/*/r)0r,v/'/f1/'/,q/{/ol1o-r,q/}/\(r,m,okol-1?\),o~r)0ok
<<AngleMatchRight>>
v/>/(r, m), ol0(v./*.f.*/.,v/"/r(f1/"/v-/*/r)0r,v/'/f1/'/,q/</ol1o-r,q/>/\(r,m,okol-1?\),o~r)0ok
<<MarkupMatchRight>>
(v"<"v"</"\)\(f"<"v"</"r)0, rn.(q/ >/\r)0a$& f/>/(v-/ /r-)0v-"/"f/</, (f/</-(v/ /r)0(v"/"\, r(v/ /r)0(v'$\, f1/>/v-'$\)))0 f/</(v"</"(r-f-/</, m-r0), )
<<DeleteChrLeft>>
(n.(r-,m-r0)?a%-)
<<RestoreChrLeft>>
(obz%m-0n.(r,m,)a$ozh$)
<<DeleteChrRight>>
(n.(r,m)?a%+)
<<RestoreChrRight>>
(obz%m0r0n.((r-,m-r0)a$ozh$(r-,m-r0)), a$oz)
<<AppendLeftPrev>>
(q-/ /r-)0(q/ /e)0n.r-0(q/ /r)0a$r-0h$b-j-(q-/ /r-)0(q/ /e)0i-/ /
<<AppendRightNext>>
(q-/ /r-)0(q/ /e)0n.r0a$m(q/ /r)0h$(q-/ /r-)0(q/ /e)0i-/ /
<<JoinLeftPrev>>
r-0(q-/ /r-)0(q/ /e)0n.r-0(q/ /r)0a$r-0h$b-j-(q-/ /r-)0(q/ /e)0i-/ /j
<<JoinRightNext>>
r-0(q-/ /r-)0(q/ /e)0n.r0a$m(q/ /r)0h$(q-/ /r-)0(q/ /e)0i-/ /j-
<<IndentFromPrev>>
r-0(v/ /e)0m-n.(v/ /r)0a$&mh$
<<IndentFromNext>>
r-0(v/ /e)0mn.(v/ /r)0a$&m-h$
<<ParagraphUp>>
m-(r\m-)0r-(rm-)0m
<<CodeSectionUp>>
(m-(q/A-Za-z/\,r\))0r- (m-(q/ /r)0q/0-9A-Za-z/)0m
<<IndentMatchUp>>
r-0q/ /\(m-(q. /$.,r\))0r-,(v/ /r)0oc(m-(v/ /r)0oco=\)0ok
<<ParagraphDown>>
m(r\m)0r-(rm)0(r\m)0r-
<<CodeSectionDown>>
(mq/A-Za-z/\,r\mm-)0 r-0
<<IndentMatchDown>>
r-0q/ /\(m(q. /$.,r\))0r-,(v/ /r)0oc(m(v/ /r)0oco=\)0ok
<<Macro0>>
%d$=##"Macro-0 parameters> " -hereEndsThePercentCommand; '0
<<Macro1>>
%d$=##"Macro-1 parameters> " -hereEndsThePercentCommand; '1
<<Macro2>>
%d$=##"Macro-2 parameters> " -hereEndsThePercentCommand; '2
<<Macro3>>
%d$=##"Macro-3 parameters> " -hereEndsThePercentCommand; '3
<<Macro4>>
%d$=##"Macro-4 parameters> " -hereEndsThePercentCommand; '4
<<Macro5>>
%d$=##"Macro-5 parameters> " -hereEndsThePercentCommand; '5
<<Macro6>>
%d$=##"Macro-6 parameters> " -hereEndsThePercentCommand; '6
<<Macro7>>
%d$=##"Macro-7 parameters> " -hereEndsThePercentCommand; '7
<<Macro8>>
%d$=##"Macro-8 parameters> " -hereEndsThePercentCommand; '8
<<Macro9>>
%d$=##"Macro-9 parameters> " -hereEndsThePercentCommand; '9
<<UpRegardless>>
ocol-1oso- (m-, b-)(o~ (r, i/ /))0 ok
<<DownRegardless>>
ocol-1oso- (m, r0b)(o~ (r, i/ /))0 ok
<<Enter>>
r-0(q/ /r)0(r,m-n.(v/ /r)0(rr-)?a$h$me0h$,)r0bm-n.(q/ /r)0a$h$mh$i`##"Enter string> " `e-
<<InsertMode>>
%s=commandmode +2
<<TempInsertMode>>
%s=commandmode +3
<<Again>>
1
<<Break>>
b-r-0n.(q/ /r)0a$h$m(q/ /e)0h$
<<QuitDebugger>>
%s=trace 0
<<FocusToMouse>>
opozono-omor(q/0-9a-zA-Z_/r)0oc(q-//r-)0oco-ou
<<NoteFromMouse>>
opozono-omor p n.
<<CopyFromMouse>>
opozono-omor p a_&
<<InsertHereMouse>>
opozono-omorh_
<<BackSlash>>
%s=commandstring ##\
<<VerticalBar>>
%s=commandstring ##|
<<Null>>

<<ScriptByName>>
%%Prompt string: Script subname> 
%%Searches scripts in PWD and ${JOT_HOME}/coms for scripts matching a a specified name.
ob
%%Define buffer 0.
n.a0&z0 oo/z%c/ i/%s=commandstring %r='+/
%%Acquire search string.
%%Add instructions to + buffer.
n.a+z+i/Select one of these scripts with names matching "/i'$i/" then hit {KP_0}./
%%Get raw directory listing.
%q~=dir ${JOT_HOME}/coms/;
%%Add the raw directory listing.
z+bh~ok
%%Filter the directory listing.
m-0m (v/dir /m, r0v-/.jot/m, k)0 m-0m z$r-0(r z+(v/dir /m, f1'$m, k)0, z+)
%%Construct the pathnames.
m-0m (v/dir /r4n.r0a$k, rr-h$m)0
%%Rewind and finish.
z+m-0m

<<ScriptByFunc>>
%%Prompt string: Script function string> 
%%Searches scripts in PWD and ${JOT_HOME}/coms for scripts matching a a specified name.
ob
%%Define buffer 0.
n.a0&z0 z0i"z+l0n.f1/ /a$&"r0 oo/z%c/ i"%s=commandstring %r='$"
%%Acquire search string.
%%%d$=mc -hereEndsThePercentCommand;
%%Add instructions to + buffer.
n.a+z+i/These script's 1-line descriptions all match "/i'$i/" select one then hit {KP_0}./
%%Get the first-line comments.
%e~=\head -1 ${JOT_HOME}/coms/*.jot ./*.jot;
%%Top and tail the report and append to + buffer.
m-0 (v/==> /e4f1/ <==/s/	/j2m, m)0 z+r0bh~bok
%%Filter out those matching the given string.
m-0f/"/-n.f1/"/a$&m (z$r-0r z+(mm-f1/	/f1'$m, k)0, z+)
%%Find rightmost tab.
ol0m-0m(f/	/roc (o<okoc,) m)0
%%Resolve the first tabs.
m-0(f/	/ei/ /o#oc (o> ocoso- (i/ /o~)0, ) ok m)0 ok
%%Rewind and finish.
z+m-0m %l;

<<FindWild>>
%%Prompt string: Find-wild string> 
%%finds next line containing substrings in correct order.
%%Set up argument list if given - use last entry if it's null.
obz$ (rr- (f1/*/eb)0 m-0n.m0r0a@, ) z@m-0oz
%%reset search list and advance current character if already at an initial match point
obz@m-0oz (v'@r,)
%%Main search loop.
f'@rr-oc (f1'@-\ mobz@m-0ozf'@rr-okoc, obz@(moz, oz\))0
%%If successfully completed search select complete string.
(v-'@ n.oco-ora$h$f-1'$, )

<<FindWildPrev>>
%%Prompt string: Find-wild string> 
%%finds previous line containing substrings in correct order.
%%Set up argument list if given - use last entry if it's null.
obz$ (rr- (f1/*/eb)0 m-0n.m0r0a@, ) z@m0oz
%%reset search list and advance current character if already at an initial match point
obz@m0oz (v'@(r-, m-r0),)
%%Main search loop.
f-'@-r-roc (f-1'@\ m-r0obz@m0ozf-'@-r-rokoc, obz@(m-oz, oz\))0
%%If successfully completed search select complete string.
(v'@ n.oco-ora$h$f-1'$, )

<<FindSequence>>
%%Prompt string: Find-sequence string> 
%%function finds the sequence of words in arg - ignoring of whitespace & breaks.
%%Set up argument list if given - use last entry if it's null.
obz$ (rr- (r(v-/*/q/_A-Za-z0-9/b, r-) (q/_A-Za-z0-9/\e)0 q//(q//r)0 brr-)0 r-0(r, j-) z@m-0k0e0h$,) z@m-0o#oz
%%If already matched to first item - find next.
(v'@r,)
( %%Main loop - first find the next occurence of the first item.
  %%Initial search for first item. 
  (f'@(q-/_A-Za-z0-9/r?, rr-f1'@-q/_A-Za-z0-9/))0 v-'@
  %%Match all remaining items.
  ( %%Index to next item - exit on last item.
    z@mo#oz
    %%Find next word.
    ((q/_A-Za-z0-9/\r)0r\m)0 r-
    (v'@(q-/_A-Za-z0-9/r?, rr-f1'@-q/_A-Za-z0-9/))0 (v-'@, obz@(v/*/oz(q/_A-Za-z0-9/r)0, oz\))
    )0
  o#ozv-'@\ z@m-0o#oz
  )0
%%Completed search - reset search list and go back to the first item.
v-'@r-rz@m-0o#oz (f-'@(q-/_A-Za-z0-9/r-?,rr-f1'@-q/_A-Za-z0-9/f-'@))0f-1'@ ok, ok

<<FindSequencePrev>>
%%Prompt string: Find-sequence string> 
%%Finds previous instance of sequence of words in arg.
%%Set up argument list if given - use last entry if it's null.
obz$ (rr- (r(v-/*/q/_A-Za-z0-9/b, r-) (q/_A-Za-z0-9/\e)0 q//(q//r)0 brr-)0 r-0(r, j-) z@m-0k0e0h$,) z@m-0o#oz
%%If already matched to first item - find next.
(v'@r-,)
( %%Main loop - first find the next occurence of the first item.
  %%Initial search for first item. 
  (f-'@(q-/_A-Za-z0-9/r?,r-?f1'@-q/_A-Za-z0-9/)r-f-1'@)0 v-'@
  %%Match all remaining items.
  ( %%Index to next item - exit on last item.
    z@mo#oz
    %%Find next word.
    ((q/_A-Za-z0-9/\r)0r\m)0 r-
    (v'@(q-/_A-Za-z0-9/r?, rr-f1'@-q/_A-Za-z0-9/))0 (v-'@, obz@(v/*/oz(q/_A-Za-z0-9/r)0, oz\))
    )0
  o#ozv-'@\ (r-, m-r0)z@m-0o#oz
  (f-'@(q-/_A-Za-z0-9/r?,r-?f1'@-q/_A-Za-z0-9/)r-f-1'@)0 v-'@
  )0
%%Completed search - reset search list and go back to the first item.
v-'@r-rz@m-0o#oz (f-'@(q-/_A-Za-z0-9/r-?,rr-f1'@-q/_A-Za-z0-9/f-'@))0f-1'@ ok, ok

<<FindInParaNext>>
%%Prompt string: Find-in-paragraph substring list> 
%%finds next paragraph containing a set of substrings
%%Set up argument list if given - use last entry if it's null.
obz$ (rr-n.r0a@z@ (f1/ /(v/ /e)0b)0, ) o#oz
(  %%Main loop - first abstract paragraph to buffer $ and reset the search list.
  (m(v/ /r)0r\)0 r-0n.(m(v/ /r)0r)0 a$& z@m-0z$
  %%Match each item in the substring list.
  (z$m-0f'@z@m)0
  %%Does this paragraph match - if so we're at the end of the substring list.
  v'@\
  %%No - continue with next paragraph. 
  o#ozmm-)0
(v'@ z@m0ozon (m-(v/ /r)0r\)0 (m-(v/ /r)0r)0 wono-omf-'@, oz)

<<FindInParaPrev>>
%%Prompt string: Find-in-paragraph substring list> 
%%finds previous paragraph containing a set of substrings
%%Set up argument list if given - use last entry if it's null.
obz$ (rr-n.r0a@z@ (f1/ /(v/ /e)0b)0, ) o#oz
(  %%Main loop - first abstract paragraph to buffer $ and reset the search list.
  (m-(v/ /r)0r\)0 r-0n.(m-(v/ /r)0r)0 a$&z$o#onosozol0oso-om z@m-0z$
  %%Match each item in the substring list.
  (z$m-0f'@z@m)0
  %%Does this paragraph match - if so we're at the end of the substring list.
  v'@\
  %%No - continue with next paragraph. 
  o#ozm)0
(v'@ z@m-0ozwf'@, oz)

<<CutRectangle>>
%%- Copies (to paste buffer) a rectangular block of text from the note point to the current cursor position.
  %%Check note buffer, get note point.
  ob %q$=system; f/Note buffer =    /-oico=\oz, f/Note linenumber = /-oidos f/Note character = /-oidos
  %%Calculate block height and width.
  oz ocoso- osono-
  %%Return to original note point.
  oso#ol0oso-or oso#(y-o~)0 ok
  %%Abstract block, one record at a time.
  n.a_ol1o- (n.oso#or?a_+*obz_r0boz oso~y)0 okok
  %%Return to note point (top-left corner of abstracted block).
  obz_m-2onol0oso-osoz (y-o~)0

<<PasteRectangle>>
%%- Pastes a block graphic image in the paste buffer with it's top-left corner character at the current cursor position.
  %%Get return position.
  ocon
  %%Get length of inserted text.
  obz_m-0onm0ono-osoz
  %%Calculate rightmost column of inserted text.
  ocobz_r0ocosozo+ ol-1oso-
  %%Check that we've enough space - add lines and whitespace as necessary.
  r-0(o#(o~(r, i/ /))0ok (m2m-, onr-0b-o.) oso~os)0 okok
  %%Restore position
  ono-om or
  %%Insert here
  h_* 
  %%Move back to original insert point.
  oc obz_m-0ol0(mo~)0osozol0oso- omor

<<LineNW>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in north-westerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "\".
obz$r-0(r, i"\")r-0(r2r-b)0m0oz 
%%Note original column number.
ocol0oso- 
(mo#ol-1oso-or
  v"/" %%We're next on the next character on a north-easterly diagonal - shift up and left.
    m-ol-1o+
  , (m-, b-)2o#ol1oso-orv"/" %%We're at the next character of a south-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m, r-0b-) ol-2o+ )
%%Main loop - inserts character(s) along a NW diagonal.
r-0(o#o~ (o~(r, i/ /))0ok r-re?i'$ obz$m-oz (m-, r-0b-) ol1o+ )0 
%%Index to next start point.
oz(m-, r-0b-)ol2o+(o~(r, i/ /))0ok

<<LineNE>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in north-easterly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "\".
obz$r-0(r, i"/")r-0(r2r-b)0m-0oz 
%%Note original column number.
ocol0oso- 
(mo#ol1oso-or
  v"\" %%We're next on the next character on a north-westerly diagonal - shift up and left.
    m-ol-3o+
  , (m-, b-)2o#ol-1oso-orv"\" %%We're at the next character of a south-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m, r-0b-) ol-2o+ )
%%Main loop - inserts character(s) along a NE diagonal.
r-0(o#o~ (o~(r, i/ /))0ok e?i'$ obz$moz (m-, r-0b-) ol-1o+ )0 
%%Index to next start point.
oz(m-, r-0b-) ol0o+(o~(r, i/ /))0ok

<<LineSW>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in south-westerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "/".
obz$r-0(r, i"/")r-0(r2r-b)0m0oz 
%%Note original column number.
ocol0oso- 
((m-, r-0b-)o#ol-1oso-or
  v"\" %%We're next on the next character on a south-easterly diagonal - shift up and left.
    mol-1o+
  , (m, r0b)2o#ol1oso-orv"\" %%We're at the next character of a south-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m-, r-0b-) ol-2o+ )
%%Main loop - inserts character(s) along a SW diagonal.
r-0(o#o~ (o~(r, i/ /))0ok r-re?i'$ obz$m-oz (m, r0b) ol1o+ )0 
%%Index to next start point.
oz(m, r0b)ol2o+(o~(r, i/ /))0ok

<<LineSE>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in south-easterly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "\".
obz$r-0(r, i"\")r-0(r2r-b)0m-0oz 
%%Note original column number.
ocol0oso- 
((m-, r-0b-)o#ol1oso-or
  v"/" %%We're next on the next character on a south-westerly diagonal - shift up and left.
    mol-3o+
  , (m, r0b)2o#ol-1oso-orv"/" %%We're at the next character of a north-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m-, r0b) ol-2o+ )
%%Main loop - inserts character(s) along a SE diagonal.
r-0(o#o~ (o~(r, i/ /))0ok e?i'$ obz$moz (m, r0b) ol-1o+ )0
%%Index to next start point.
oz(m, r0b) ol0o+(o~(r, i/ /))0ok

<<DSLineNW>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws staggerd line in north-westerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "\".
obz$r-0(r, i"\")r-0(r2r-b)0m0oz 
%%Note original column number.
ocol0oso- 
((m, r0b)o#ol-2oso-or
  v"/" %%We're next on the next character on a staggerd north-easterly diagonal - shift up and left.
    m-ol0o+
  , (m-, b-)2o#ol1oso-orv"/" %%We're at the next character of a staggerd south-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m, r-0b-) ol-1o+ )
%%Main loop - inserts character(s) along a NW diagonal.
r-0(o#o~ (o~(r, i/ /))0ok r-re?i'$ obz$m-oz (m-, r-0b-) ol2o+ )0 
%%Index to next start point.
oz(m-, r-0b-)ol2o+(o~(r, i/ /))0ok

<<DSLineNE>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws staggerd line in north-easterly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "\".
obz$r-0(r, i"/")r-0(r2r-b)0m-0oz 
%%Note original column number.
ocol0oso- 
((m, r0b)o#ol2oso-or
  v"\" %%We're next on the next character on a staggerd north-westerly diagonal - shift up and left.
    m-ol-4o+
  , (m-, b-)2o#ol-1oso-orv"\" %%We're at the next character of a staggerd south-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m, r-0b-) ol-3o+ )
%%Main loop - inserts character(s) along a NE diagonal.
r-0(o#o~ (o~(r, i/ /))0ok e?i'$ obz$moz (m-, r-0b-) ol-2o+ )0 
%%Index to next start point.
oz(m-, r-0b-) ol0o+(o~(r, i/ /))0ok

<<DSLineSW>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in a staggerd south-westerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "/".
obz$r-0(r, i"/")r-0(r2r-b)0m0oz 
%%Note original column number.
ocol0oso- 
((m-, r-0b-)o#ol-2oso-or
  v"\" %%We're next on the next character on a staggerd south-easterly diagonal - shift up and left.
    mol0o+
  , (m, r0b)2o#ol1oso-orv"\" %%We're at the next character of a staggerd south-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m-, r-0b-) ol-1o+ )
%%Main loop - inserts character(s) along a SW diagonal.
r-0(o#o~ (o~(r, i/ /))0ok r-re?i'$ obz$m-oz (m, r0b) ol2o+ )0 
%%Index to next start point.
oz(m, r0b)ol2o+(o~(r, i/ /))0ok

<<DSLineSE>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in a staggerd south-easterly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "\".
obz$r-0(r, i"\")r-0(r2r-b)0m-0oz 
%%Note original column number.
ocol0oso- 
( (m-, r-0b-)o#ol2oso-or
  v"/" %%We're next on the next character on a staggerd south-westerly diagonal - shift up and left.
    mol-4o+
  , (m, r0b)2o#ol-1oso-orv"/" %%We're at the next character of a staggerd north-westerly diagonal - shift left only.
    ol-2o+
  , %%All other cases - start drawing at original cursor position.
  (m-, r0b) ol-3o+ )
%%Main loop - inserts character(s) along a SE diagonal.
r-0(o#o~ (o~(r, i/ /))0ok e?i'$ obz$moz (m, r0b) ol-2o+ )0 
%%Index to next start point.
oz(m, r0b) ol0o+(o~(r, i/ /))0ok

<<LineS>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in southerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "|".
obz$r-0(r, i"|")r-0(r2r-b)0m-0oz 
%%Note original column number.
ocol0oso- 
( v-"-" %%We're next on the next character on an easterly line - shift down and right.
    (m, r0b)ol-2o+
  , rv"-" %%We're at the next character of a westerly line - shift down and left.
    (m, r0b)ol-2o+
  , %%All other cases - start drawing at original cursor position.
  r- ol-2o+ )
%%Main loop - inserts character(s) along a southerly line.
r-0(o#o~ (o~(r, i/ /))0ok e?i'$ obz$moz (m, r0b) )0 
%%Index to next start point.
oz(m, r0b) ol1o+(o~(r, i/ /))0ok

<<LineN>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in northerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "|".
obz$r-0(r, i"|")r-0(r2r-b)0m0oz 
%%Note original column number.
ocol0oso- 
( v-"-" %%We're next on the next character on an easterly line - shift up and right.
    (m-, r-0b-)ol-2o+
  , rv"-" %%We're at the next character of a westerly line - shift up and left.
    (m-, r-0b-)ol-2o+
  , %%All other cases - start drawing at original cursor position.
  r- ol-2o+ )
%%Main loop - inserts character(s) along a northerly line.
r-0(o#o~ (o~(r, i/ /))0ok e?i'$ obz$m-oz (m-, r-0b-) )0 
%%Index to next start point.
oz(m-, r-0b-) ol1o+(o~(r, i/ /))0ok

<<LineE>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in easterly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "-".
obz$r-0(r, i"-")r-0(r2r-b)0m-0oz 
%%Note original column number.
ocol0oso- 
((m-, r-0b-)o#ol0oso-or v"|" %%We're next on the next character on a northerly line - shift right.
    mol-3o+
  , (m, r0b)2o#ol0oso-orv"|" %%We're at the next character of a southerly line - shift right.
    m-ol-3o+
  , %%All other cases - start drawing at original cursor position.
  m- ol-2o+ )
%%Main loop - inserts character(s) along an easterly line.
r-0o~ (o~(r, i/ /))0ok (e?i'$ obz$moz )0 
%%Already at next start point.
oz

<<LineW>>
%%Prompt string: Draw-line string> 
%%Drawing function - draws line in westerly direction, with tidy corners.
%%Pick up optional string argument.
%%Check - if no arg given, default to "-".
obz$r-0(r, i"-")r-0(r2r-b)0m0oz 
%%Note original column number.
ocol0oso- 
((m-, r-0b-)o#ol0oso-or v"|" %%We're next on the next character on a northerly line - left.
    mol-1o+
  , (m, r0b)2o#ol0oso-orv"|" %%We're at the next character of a southerly line - shift right.
    m-ol-1o+
  , %%All other cases - start drawing at original cursor position.
  m- ol-2o+ )
%%Main loop - inserts character(s) along a westerly line.
r-0 (o~(r, i/ /))0ok (e-?i-'$ obz$m-oz )0 
%%Index to next start point.
oz r-

<<Box>>
%%Prompt string: Box size> 
%%Drawing function - draws a box with the top-left corner at the current cursor position.
%%Pick up dimensions argument.
%%o@%d$=9 5 -hereEndsThePercentCommand; 
%%Check - if no arg given, default to "10 5".
obz$r-0(rr-(q/0-9/ f1/ /(v/ /r)0q/0-9/, %x=Box argument must be <Width> <Height> (both integers).;), i"10 5") r-0oidol0oso-os oidol0oso-os ozos 
%%Start drawing - first the top horizontal line.
o# e?i/ / (o~e?i/-/)0 e?i/ / ok
%%2nd. the right-hand vertical.
oso# (ocol0oso-(m, r0b)(o~(r, i/ /))0 oke?i/|/o~)0 ok
%%3rd. the bottom horizontal.
os ocol0oso-(m, r0b) (o~ (r, i/ /))0 ok (o~e-i-/-/)0 ok
%%Lastly the left-hand vertical.
(ocol0oso-m-(o~(r, i/ /))0 okei/|/o~)0 ok

<<Lozenge>>
%%Prompt string: Lozenge size> 
%%Drawing function - draws a lozenge-shaped box with the top corner at the current cursor position.
%%Pick up dimensions argument.
%%Check - if no arg given, default to 5, check that current character is at least the lozenge size.
obz$r-0(rr-(q/0-9/, %x=Lozenge argument must be <Side> (an integer).;), i"5") r-0oidol-1oso-os oz
%%Check starting point.
o#oco+ ol0(o< %x=Error can not draw a lozenge of that size from the this starting point.;, ) ok
%%Start drawing - first the top-right diagonal.
o#ocol0oso- (ol-1o+ oso~oso#e?i"\"(m, r0b)((r, i/ /)o~)0 ok)0 okok
%%2nd. the bottom-right diagonal.
o#r-ocol0oso- (ol1o+ oso~oso#e?i"/"(m, r0b)((r, i/ /)o~)0 ok)0 okok
%%3rd. the bottom-left diagonal.
o#oc (o#m-or ol-1o+ oso~ose?i"\")0 okok
%%os ocol0oso-(m, r0b) (o~ (r, i/ /))0 ok (o~e-i-/-/)0 ok
%%Lastly the top-left diagonal.
o#roc (ol1o+ oso~ose?i"/" o#(m-, r-0b-)or)0 mokol-1o+orok

<<DSLozenge>>
%%Prompt string: Lozenge size> 
%%Drawing function - draws a double-spaced lozenge-shaped box with the top corner at the current cursor position.
%%Pick up dimensions argument.
%%o@%d$=6 -hereEndsThePercentCommand; 
%%Check - if no arg given, default to 5, check that current character is at least the lozenge size.
obz$r-0(rr-(q/0-9/, %x=Lozenge argument must be <Side> (an integer).;), i"5") r-0oidol-1oso-os oz
%%Check starting point.
o#ol2o*oco+ ol0(o< %x=Error can not draw a lozenge of that size from the this starting point.;, ) ok
%%Start drawing - first the top-right diagonal.
o#ocol0oso- (ol-2o+ oso~oso#e?i"\"(m, r0b)((r, i/ /)o~)0 ok)0 okok
%%2nd. the bottom-right diagonal.
o#r-2ocol0oso- (ol2o+ oso~oso#e?i"/"(m, r0b)((r, i/ /)o~)0 ok)0 okok
%%3rd. the bottom-left diagonal.
o#(r, i/ /)oc (o#m-or ol-2o+ oso~ose?i"\")0 okok
%%Lastly the top-left diagonal.
o#r2oc (ol2o+ oso~ose?i"/" o#(m-, r-0b-)or)0 mokol-1o+orok

<<BoxText>>
%%Prompt string: Box text> 
%%function - writes given text into line-drawing box.
%%Pick up optional string argument - if none given then clears out all text.
%%Split arg into words, if no arg given, default to " ".
obz$r-0((f/ /r(v/ /e)0b)0r0i/ /m-0, i" ")r-0 oz
%%Find top boundary of box (may be lozenge-shaped with diagonal boundaries) load the column no. onto stack.
( q-"--"\(q"|/\"\r)0 v"|"oco#m-or, v"/"oco#m-or(v" /"r,), v"\"oco#ol1o-m-or(v-"\"r-,) q"|/\"ok)0 mo#or
%%
%%Line loop - fill this line with words until we find a word that won't go.
%%Find next line in box big enough for next word.
%%Get the box width for the first line.
(q"-|\/"\r)0oc(q-//\r-)0oco-
( %%Word loop - add words to current line until the next word would make it go pop.
  %%Get the width of the next word.
  obz$r0ocosoz
  %%Is the remaining line-width sufficient?
  ( o< %%No - move on to next line.
    oko#mor(q-"-|\/"\r-)0((q"-|\/"\ v-/-/\)\ %x=Insufficient space for your text;, ) (q"-|\/"\ei/ /)0r-oc(q-//\r-)0oco-ei/ / 
    %%Pick up width of next word.
    obz$ocosoz
  , %%Yes add the word.
    i'$obz$ocosozol0oso-(eo~)0ok obz$ocosozo- obz$mr0ocosoz)0
  obz$mm-oz)0
ok osokosok z$(m\, %x=Failed to add some of your words.;) ozw

<<Help>>
%%Prompt string: Help key> 
%%Function to browse through help normally.
  %%If in the ; buffer (help menu) reload from selected topic, 
  %%  if none selected then go up one level,
  %%  if in some other buffer load from top level, saving original buffer key.
  %%If an argument is specified then list all matching help keys.
  %%
  ob z$r-0(v/ /e)0 
    (rr-
    %%A search-string was given - Preserve top line, fold header, for return
    z;m-0 (mk0,)e0i/  The following keys refer to "/i'$i/"/b2 z:m-0
    %%Find matching fold headers.
    (f'$r-0(v/{{{/,v/[/)na@h@z;h@z:,m)0 z;m-0n.r0a$h$m0ok,
    %%No search-string given - first check that we're in the help buffer.
    z;ob(o=ok, z:m0ozr-0na;&z;)
    %%check for file-fold.
    r-0v/[/ 
    %%It's a file fold - expand path and fetch help info.
    ( (m-k-0,)mk0e0m-n.(f1/ /, r0)a@h@e0
      i/.hlp/r-0e(v/]/e,f1/]/ei"/")r-0i"%i;=${JOT_RESOURCES}/help/" ';
      %%Integrate new data with help text.
      m0n.r0a$i/}}}/m-0b-i/{{{ /h$ 
      %%Replace correct file-fold mark with new entry - preserving comments.
      z:(f-'@-v/ /\rm-r0)0 (v-'@r-0, m0b-) n.r0a@z;r0h@z: h;z;, )\ ,
    %%Assume it's a normal fold - traverse fold and extract help entry.
    z;r-0
      (f1/{{{/
      %%At a fold mark, find this fold mark in main buffer.
      r-0n.r0a$h$ z:(f-'$r0v-'$\m-)0,
      %%Not on a fold mark - go back up hierarchy, first find current header.
      z;m-0 (f/{{{/n.r0a$h$ z:(f-'$r0v-'$\m-)0r-0, z:m-0)
      %%Now find parent header.
      ol-1(m-(f1/}}}/ol1o-, (f1/{{{/\, o~)))0 ok ) 
    %%Copy fold-mark into ';'. 
    r-0n.ma;h;ol-1
    %%Copy current-level fold marks and text into ';'.
    ((f1/}}}/\(ol-1o= n.ma!h!z;m0h!z:m-, ), o~) (f1/{{{/ol1o-,) m)0 ok )
  %%Add the index help point.
  z;m-0f'$(r-m-0m3, mf/{{{/, m-0(v/[/\m)0) 

<<FindAllHelp>>
%%Prompt string: Find-help string> 
%%function - returns all keys where text contains the string.
z$
(v/ /rr\
  %%Argument not given - report hierarchy.
  z;m-0 z:on
  %%Find current Fold mark and initialize list.
  f-';na;h;m-2
  ( %%Loop to find parent fold mark.
    %%Find parent fold.
    ol-1 r-0 (f1/}}}/ol1o-m-,f1/{{{/\m-,o~m-)0 ok
    %%Extract parent fold comment.
    na$h$ z;m-0h$
    %%Ascend one level.
    z:m-2)0
    
  z:ono-om
  z;
  
  , %%Argument given - save the original fold mark and search for key.
  z;m-0(mk0,)e0i/  The following entries refer to "/i'$i/"/b2 z:m-0 
  (  f'$
    %%Keep the actual line for display.
    na@h@z;m0h@z:m-
    %%Step back to the header for this fold.
    on ol-1r-0 (f1/}}}/ol1o-m-,f1/{{{/\m-,o~m-)0 ok 
    %%If this is the first entry in this fold add it to the help list.
    na@h@z;m-0m2(f'@, m0m-h@)z:
    %%Got the item header - now return.
    ono-om m
    )0 z;m-0m3
  )

<<RemoveHelpFold>>
%%function - restores original file fold where appropriate.
%%Collapse file fold in help repository.
z:m-0f';mn.m-
ol0r-0(f1/{{{/\m)0r-0 (f1/{{{/ol1o-m,f1/}}}/\m,o~m)0 ok
ma$ m-v/{{{ /e4
%%Collapse file fold in help window.
z;e4

<<AddNewFunctions>>
%%Adds function definitions in ( @ ) buffer to code repository and updates hashtable.
%%
obz'm0 (rr0bm-, m-)2m0 onh@ ono-om
%%Check the function definitions and set up the function hashtable.
((v/<</\m)0 mm-r2n.f1/>>/a@& %h=add '@;)0
%%
%%If the keymap buffer contains symbolic keys ( of the form {<keySequenceDescription>} ) then resolve these now.
z^m-0(v/{/\m)0 
( v/{/\,
  ( %q=windows;
    %r=WindowsNT_keys;
  , %%unix then.
    %q!=version; kf/ ncurses /- e-0i/%r=curses_keys_/ (f1/./s/_/)0 r0i/;/ '!
  , %x=Error: Unknown ncurses version.; )
  %%Replace symbolic keys.
  (z^v/{/n.f1/}/-a!&v-'! z@m-0(f'!r-0n.r8a!&z^s'!m, m) )0 )
%%
oz

:

%g#
%%The single-line functions are copied directly into the key-translations buffer ( ^ ), multi-line functions are called using %h'=call <name>;.
%%
%%Set up the hashtable in the code-repository buffer ( ' ).
%h'=create 1000;
%%
%%First set up the key-translation table and append it.
obz' ((v/<</\m)0m2v/<</m-n.r0a;&m- z@m-0(f''s';e0)0 z'm2, m-2z@m-0f''-e0z'm)0 z^m-0h@ oz
%%Now check the function definitions and set up the function hashtable.
obz'm-0 ((v/<</\m)0 mm-r2n.f1/>>/a$&r2 ( %h=new '$;, %m=Warning: duplicate function definition for '$;) )0 oz
%%Add code to pick up and call functions.
obz^m-0
( %%Function loop.
  %%Check function names and keycodes.
  (f/<</r-8r-m)0 r8e2n.f1/>>/a$&e2r-0r8z' 
  %%Go to function code, does it have parameters?
  ( %h=find '$; mv/%%Prompt string:/
    %%Yes - insert parameter-value handling and prompt string.
    f1/:/-n.r0a$& z$r-0i|obn.a$z$i/##"|r0i| " /e-r-0oz |
  , %%No prompt string, assume there to be no parameters.
    n.a$ ) 
  z^h$i"%h'=call "r0i";" m)0
oz
:
'#

%%Initialize help repository. 
ob
%i:=${JOT_RESOURCES}/help/help.hlp;?
oz

