%%Converts an html document to plain text. The original html is converted in situ and may be just the latest of a number of htmls appended to the buffer.
%%
%%    Copyright (C) 2013-2018 Jon. Easterbrook
%%
%%    This file is part of jot (Joy Of Text - a text editor).
%%
%%    jot is free software: you can redistribute it and/or modify
%%    it under the terms of the GNU General Public License as published by
%%    the Free Software Foundation, either version 3 of the License, or
%%    (at your option) any later version.
%%
%%    jot is distributed in the hope that it will be useful,
%%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%%    GNU General Public License for more details.
%%
%%    You should have received a copy of the GNU General Public License
%%    along with jot.  If not, see <https://www.gnu.org/licenses/>.
%%
%%
%%

%g#
  Options.
    - -url=<url> - pulls the specified document (could be in html, pdf or ms-word format), appending it to current buffer, then translates that.
    - -seturl=<URL> - Processes the html in the current buffer, but sets the pathname to the specified URL.
    - -notidyup - don't bother trying to tart up the extracted text.
    - -list - the current buffer contains a list of htmls to be processed.
    - -raw=<pathname> - (for debugging) skips tika and instead reads the specified file before performing the tidyup.
    
  Sets up macro ( 7 ) - follows all links in current document.
  Sets up macro ( 6 ) - creates an index to all files at the top of the text.
    
  Buffer usage:
    Current buffer - Final destination for translated text and, in the case of a -list, the list of files/URLs.
    ( @ ) - Destination buffer for curl downloads and most translations.
    ( $ ) - holds parameters, pathnames, CLI commands and temporary text.
    ( # ) - temporary text.
    ( * ) - Holds a tags report for html2txt_FollowAllLinks
    
  Data objects:
    the html2txt script uses the ( ' ) buffer hashtable to maintain a list
    of jump points (see `about hashtables`) - one for each href target in  the
    original html:
      - .=html2txt_OriginalArgs -- the argument list given to html2txt
      - .=html2txt_ThisURL      -- In html2txt_Translate it is the complete URL of the current page.
      - .=html2txt_History      -- the history trail.
  
:
  
%h.=create 10000;
%h=data .=html2txt_OriginalArgs; obz$r-0n.r0a~& osozov/.=html2txt_OriginalArgs/
%h=data .=html2txt_CurrentURL;   %d~=<No URL>; ov/.=html2txt_CurrentURL/
%h=data .=html2txt_History;      %d~=;         ov/.=html2txt_History/
%h=data .=html2txt_List;         %d~=;         ov/.=html2txt_List/
  
%%
%%The doc2txt and pdf2txt scripts are used for some documents, preserve their help entries in the ( ? ) buffer.
obz' (%q=key -key=pdf2txt_translate; oz, oz %r=pdf2txt; obz#m0b2i/pdf2txt.jot help entry:/bh?oz )
obz' (%q=key -key=doc2txt_translate; oz, oz %r=doc2txt; obz#m0b2i/doc2txt.jot help entry:/bh?oz )
%%
%%Assemble the help entry in buffer ( ? ).
z#m-0n.m0a?oz
  
%g@

<<html2txt_main>>
%%The starting point for translation of htmls or lists of links/pathnames.
%%The default behaviour is to assume the current buffer is a html and the script transforms that to plain text in buffer ( @ ).
%%
%l;
%%Set up colour tags.
obz. %b=tagtype -colour=0:2 HTMLRef; oz
%%
%%Arg-parsing block.
oboq/.=html2txt_OriginalArgs/z~r-0
( %%CLI block - process any user-specified options.
  (v/ /r)0r\
  %%No qualifiers - simply translate the html in the current buffer then exit.
  %%Pick up pathname and make it absolute.
  oso#oz %q$=buffer; f/ pathName = /-br-0i"file://" (v"/",  %q~=wd; kz$i'~i"/"ok)
  %%If the html is not in the primary buffer move it there.
  olc.(o=ozm-0, ozm-0n.m0r0a@z.onh@ono-om)
  %%Translate.
  obz$r-0n.r0a~&ov/.=html2txt_CurrentURL/ozon %h'=call html2txt_translate;?
, r-i-/ /f1/-url=/-
  %%Pull the specified html and then translte.
  n.(f1/ /, r0)a$& z$n.r0a~&osokosoz ov/.=html2txt_CurrentURL/ 
  obz$r-0i/%e@=curl -L "/r0i/"/ %m?=Pulling document with &'$;   ('$ ozonbh@ono-om, ozok)
  %%Translate.
  %h'=call html2txt_translate;?
, m-0f1/-seturl=/-
  %%The primary buffer is a previously-downloaded html - translate this one.
  n.r0a$& z$okn.r0a~& osozov/.=html2txt_CurrentURL/ m-0((v/ /r)0r\ m)0 (r-r, %m?=Error: this file is completely blank.; )
  %h'=call html2txt_translate;?
, %%If -raw=<pathname> was given then just read in that file and proceed to tidyup.
  m-0f/-raw=/- %%Debugging option - read the specified file instead of running  tika then do tidy up.
  n.r0a$& %i@='$; okozonh@ ono-om
, m-0f/-list/   %% -list now deals with local files and URLs
  %%The current buffer is assumed to contain a list of files to be translated.
  osozok m-0 
  ( %%File loop - process each line of the filename list.
    %%Ignore any blank or comment lines.
    ( r-0r\m, r-0 (v/%%/\ v/#/\)\m )0
    %%It it's a chapter mark, were done.
    v/Chapter/\
    %%Another pathname.
    mm- p onob (v/ /r)0 n.r0a$& 
    %h'=call html2txt_TranslateAny;
    %%If the text contains alphas in column 1 these could be mistaken for chapter marks - indent all nonblank lines now.
    z@m-0(q/a-zA-Z/\m)0 (m m-0(rr-i/  /m, m)0, )
    %%Add the translation to the archive.
    ozm0r0bh@
    %%Move to next item in the document list, exit loop on first empty line.
    ono-om m )0
  m-0(v/chapter/\m)0 (v/chapter/m, i/  /m)0
  %%
  , osoz %m=Error: Invalid qualifier &'~; okx0
  ) %%CLI block ends.

<<html2txt_TranslateAny>>
%%Translates link supplied in ( $ ) buffer.
%%
%%Add the chapter mark.
m0r0b2i/Chapter ----------------------------------------------- /i'$
%%Preserve URL (may be a local pathname).
( %%File-type block for -list.
  z$r-0 
  ( %%Construct URL prefix where necessary.
    (v/http:/\ v/https:/\ v/file:/\) %%File is on the local filesystem - add the file:// prefix and, if necessary the path.
    %%Local file ... or is it a directory or a link?
    ( %e@=file &'$; f1/directory/ x3, z$)
    r-0i"file://" (v"/", %q@=wd; mz$i'@i"/" ) , )
  %d~='$; ov/.=html2txt_CurrentURL/ r-0
  %e=curl -L &'$& > /tmp/x;
  %e@=file /tmp/x; 
  f1/HTML document/  %%HTMLs must be translated in their destination buffer (or else the colour tags fail).
  %%We also have to use the html2txt_translate chapter tag as it is tagged for local refs.
  %i@=/tmp/x; ozk-onh@bono-omob %h'=call html2txt_translate;? okn.a@
, (f1/ASCII text/\ f1/Unicode text/\ f1/Unicode (with BOM) text/\ f1/ISO-8859 text/\)\ 
  ( %%Plain text - could be an HTML?
    %i@=/tmp/x; f/<!DOCTYPE html>/ %%It's some flavour of html.
    ob %h'=call html2txt_translate;?
  , %%Plain text - do nothing.
    )
, f1/PDF document/
  %r=pdf2txt /tmp/x; 
, f1/Microsoft Excel/
  %%First pull the spreadsheet to /tmp.
  ( %%Now use tika to extract the text.
    ( %q!=dir ${JOT_RESOURCES}; e4r0n. f/tika/r-0a@i./.mk0, %x=Error: Failed to locate a tika jarfile in ${JOT_RESOURCES}; )
    %e@=java -jar &'!& --text /tmp/x; o#oz %b=tabstops -1;
  , %%Tika failed.
    %m?=Error: Something went wrong while attempting to translate that spreadshet.; )
, f1/Microsoft Excel/
  %r=pdf2txt '$;?
  z@i'!b3 
, m-0f/Composite Document File/
  o#ozr-0n.r0 %r=doc2txt /tmp/x;
, m-0f/Microsoft Word 2007/
  o#oz %r=doc2txt /tmp/x; 
, %%An error - either an unknown file type or, maybe, a directory?
  %e@=file /tmp/x; o#ozbi/  --  Invalid file type -- /i'@b n.a@ )

<<html2txt_FollowLink>>
%%  %s=mousemask 0;   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% debugging only.
%%On a left-button click on tagged text, Follow the relevant hyperlink or, if no hyperlink, return.
%%If no tags on clicked area, returns to previous view.
%%
%%Create the entry in the history trail.
%%
%%Add the view to trail.
ob oq/.=html2txt_History/ ox(rr-,)ox(o=okol0,) oc on of ob z@m-0k0 
%%Build the history entry.
oo/.=html2txt history: Buffer %c, / r0oo/top line %d, / r0oo/line %d, / r0oo/chr %d, / r0oo/substring %d/ b-
%%Add to the history trail.
z~m0h@ osozok
( %%Go to the mouse-click position.
  obopozono-omor
  %%Find text tags - if one exists this is deemed to be a key for the local hashtable.
  %q~=tags -here; f/  Type text from chr /f1/"/-b-k-0f1/"/ej r-0(f/|/s/_VB_/)0r-0(f/=/s/_EQ_/)0 osozo#ov/.=html2txt_CurrentURL/ ob
  %%Does the link destination exist in the current collection?
  ( o# %h=jump '~;
    okon(rm)0 %w=refresh; ono-omr0ocr-0ou
  , %%Link destination not yet set up - it's a reference to some new document, read and translate the document before attempting to follow the link.
    osz~r-0n.(f1/#/, r0)a$&z$oko#oz %h'=call html2txt_TranslateAny; 
    %%If the text contains anything that can be mistaken for a chapter mark, indent all non-blank lines.
    z@m-0(q/a-zA-Z/\m)0 (mm-0(rr-i/  /m, m)0 , )
    %%Now add the new text.
    ozm0r0bh@b2
  , %%Clicked to untagged text - return to previous view.
    %%Pick up and check history-trail entry.
    osozokob 
    ( %%Check the history data and return to previous focus.
      oq/.=html2txt_History/z~ m0m-k-v/html2txt history/ f1/, substring /-oid f-1/, chr /-oid  f-1/, line/-oid f-1/, top line /-oid  f-1/ Buffer /-oic k-?
      %%Restore original view.
      oz osono-om  %w=refresh; ofo-ow or ou
      okokx3
    , %%No valid history-trail entry.
      osozokx3 ) ) )
%%Reset line numbers
oconm-0ono- %h=fix; omor
 %w=refresh;  %h'=call WindowAlignTop; %l;

<<html2txt_translate>>
%%Main html-processing function.
%%  
%%Add the Chapter tag with the URL.
%%
%%Add the Chapter tag with the URL.
%%
%%Add a valid chapter heading at the top of page text.
obmm-b2oq/.=html2txt_CurrentURL/z~r-0n.(f1/#/, r0)a$&osozok b-i/Chapter URL: ----------------------------------------------- /i'$
%%Create a target tag for any references to this page and set the html2txt_CurrentURL object.
mon %h=addjump .=&'$; 
  
%%Strip out any leading whitespace.
o#ono-om ((q/ 	/e)0m)0
  
%%Strip off any carriage returns and re-join any broken lines.
o#ono-om obz$m-0k0e0 olxD oo"( (r0v-/%c/e-, ) (v-/=/e-j, m) )0" oz'$
%%o#ono-om ( (r0v-/\r/e-, ) (v-/=/e-j, m) )0
   
%%If it be a multi-part .mhtml then delete all non-html parts.
o#ono-omn. ( f/------MultipartBoundary--/m (f1"text/html"r-0 (v/Content-/m)0 a$? f/------MultipartBoundary--/n.m, f/------MultipartBoundary--/m )0 m0a$, )
 
%%Remove html commants and style sections now. 
o#ono-om (f/<!--/n.f/-->/-a@+)0
o#ono-om (f/<style/n.f"</style>"-a@+)0
  
%%Strip out any javascript etc.
o#ono-om (f/<script/n.f"</script>"-a@)0
  
%%Allow hypertext refs through as jot-style references.
o#ono-om
( %%hyperlink reference and destination-point loop.
  f/<a /n.f/>/-a$& obz$m-0 m-0
  ( r2(v/ /r)0v/href=/  %%It's a hypertext reference.
    %%Extract only the link part.
    f/"/-e-0(m-k-0, ) f/"/e0(mk0, )
    %%If there is no taggable text then the URL becomes the displayed text.
    oz n.f"</a>"a#&obz# ((v/ /r)0v/</(f1/>/-, j)0e-0)0(f/</e0, r0(v-/ /r-)0e0 ) r-0(roz, i/Click here/ozi'#r?)
    %%Tag the reference text 
    %%N.B. this is only the link text, colour tags must wait until all link destination points are found.
    f-'#
    ( obz$r-0 v/#/ %%It's reference to some point in the same page.
      oz %b=addtag HTMLRef; oboq/.=html2txt_CurrentURL/z~r-0n.(f/#/, r0)a#&osozok %b=addtag -text='#&'$;
    , v/http/ %%It's a reference to some page somewhere out on the web.
      oz %b=addtag HTMLRef; %b=addtag -text='$;
    , v/javascript/ %%Skip javascript.
      ozf"</a>"-
    , %%Assumed to be some document local to the original.
      oq/.=html2txt_CurrentURL/z~r0(v-./.r-, )f-./.-n.r-0a$-& osozok %b=addtag HTMLRef; %b=addtag -text='$;)
  , v/name=/ %%It's a link destination point.
    %%Pick up the reference tag and current URL to make the complete hashtable key then create the index entry.
    f/"/-n.f1/"/a#&z# (f/|/s/_VB_/)0r-0(f/=/s/_EQ_/)0r-0 ozoq/.=html2txt_CurrentURL/obos z~r-0n.(f1/#/, r0)a$& z#okr-0i'$i/#/oz %h=addjump .=&'#;
  , %%Something else ... ignore it.
    oz )
  )0

%%Strip out any preexisting indentation.
o#ono-om ((v/ /e)0m)0
 
%%Translate tabs to pairs of blanks.
o#ono-om (f/\t/s/  /)0
%%  %%Remove any carriage-returns.
%%  o#ono-om (f/\r/e)0  
%%Rejoin lines ending in '='
o#ono-om (r0v-/=/e-j(v/ /e)0, m)0
%%Rejoin lines ending in '=20'.
o#ono-om (r0v-/=20/ e-3i/ /m(v/ /r)0(v/\t/e, ), m)0
%%Translate HTML paragraph markers. 
o#ono-om (f/<p /(v-/ /e-)0n.f1/>/-a$+ bi/<br>/bi/  /(v/ /e)0 )0 
o#ono-om (f/<p>/e3(v-/ /e-)0 bi/<br>/bi/  /(v/ /e)0 )0 
%%Remove line breaks
o#ono-om ((v/ /r)0 r\j (v/ /e)0, m)0
  
%%Deal with whole lines of literal text - ignore mid-line snippits.
o#ono-om 
( f/<div class="literallayout">/ (f1/<br>/\ f1"</div>"\m)0
  ( v/<br>/ %%The literal-text extends over more than one line - tag each line as literal.
    f-/<div / (f1/<br>/e4(rr-b,), f1"</div>"\r-0i/	/m )0
    )0
  )0
  
%%<PRE> - in the original text these were prefixed by tabs.
o#ono-om ( f/<PRE>/b (r-0i/	/f1"</PRE>"\m)0 r6b )0
  
%%Take out Leading whitespace on blank lines.
o#ono-om ((v/ /r)0 (r, e-0)m)0
  
%%Translate quotes.
o#ono-om (f/&quot;/s/"/)0
  
%%Translate amphesends.
o#ono-om (f/&amp;/s/&/)0

%%Translate blanks.
o#ono-om (f/&nbsp;/s/ /)0
  
%%Those "<HR>" things - horizontal lines?? - ignore them. 
o#ono-om (f"<HR"n.f1">"-a$+)0
  
%%Bullet points
o#ono-om oq/'=DocBulletString/ ( f/<li>/-b i/  /i'~)0 ok
%%Still with bullet points, remove any </UL> entries at the start of a new line.
o#ono-om (f"</UL>"-b)0
%%( f/<li>/-bon (m-v/ /\)0(v/ /r)0oc osono-om ol-1oso-(o~i/ /)0ok i'~)0
%%  ( %%Search each record loop.
%%    (f1/<li>/\ f1/<li /\ (m, x3))0 (f-1"</li>"-b, )
%%    r-0i/  - /(v/ /e)0 f1/>/-(v/ /r)0(r, j)
%%    %%If this is a multi-line list item indent subsequent lines n.b. list item may be terminated by </li>, <ol> or <ul>.
%%    ( (f1"</li>", (mi/    /(v/ /e)0 (f1"</li>"\ f1/<ul>/\ f1/<ol>/\))0 r5b-), )
%%    m )0
  
%%Add extra indentation to block quotes.
o#ono-om (f/<blockquote>/ r-0i/  /(f1"</blockquote>"-\ji/ /)0 b)0
  
%%Respect <br>
o#ono-om (f"<br>"e4(v-/ /e-)0 (r\r-\, b(v/ /e)0) )0
  
%%Indent all unindented lines beginning with alpha characters.
o#ono-om (q/a-zA-Z/i/  /m, m)0
  
%%Translate section headings.
o#ono-om
( %%Find the next level-numbered heading.
  ((f"<h" n.r2q"1-9"\(r,m))0 oid(f">", )\)0 v">"ra$+ 
  %%Tidy up the end of the heading - may be on next line.
  (r-rb,) (f1"</h"\j(v"  "e, i" "), n.f1/>/-a$+(v-/ /e-)0(rr-b-,)\)0 (rr-b-,) m (v/  /, i/  /) m-
  %%Add a blank section-heading number - these will be updated later.
  ol-1oso- r-0b (o~i/1./)0 e-i/ /ok
  %%Strip out any blank lines following headings then normalize the indentation of the first paragraph.
  m ( ( (v/ /r)0 r\k)0 r-0 (v/  /, i/  /) r2(v/ /e)0 )
  )0

%%Remove any remaining HTML tags.
o#ono-om (f/</n.f/>/-a$+)0
  
%%Translate unicode characters.
o#ono-om (f/=E2=80=/e7oixolx2000o+oo/%lc/)0
  
%%Restore escaped html special characters.
o#ono-om (f/=/-(q/0-7/e-n.r2a$obz$r-0oixosozoo/%c/, r, e-j(v/ /e)0) r)0
o#ono-om(f/&gt;/s/>/)0
o#ono-om(f/&lt;/s/</)0
o#ono-om(f/&copy;/s/©/)0
o#ono-om(f/&#/oc r2(q/0-9/oid, v/x/roix, )(v/;/rosoco-ouoo/%lc/, rokok))0
  
%%Remove unnecessary blank lines. 
o#ono-om (((q/	 /r)0rm)0 e-0m((q/	 /r)0r\ k)0m)0
  
%%Add separating whitespace if two tags coincide
ob %q$=tags; (f1/, active colour is HTMLRef/m, k)0 m0r0bm-0 
%%Search for the first tagged line in the new page.
os ((v/  At rec /\m)0 r8oid o<\ m)0 r-0os
( %%Record loop.
  %%First join the report lines for each line of the buffer and go to that line in the page then remove the line no. from stack.
  f1/  At rec /-oid osozo#ono-om obos z$(mf1/  At rec /-oido=j-)0 okm-
  ( %%Tag loop - pick up the endpoint of the current tag and the start point of the next.
    f/ to /-oid(f1/ chr /-oid, x2) z$
    %%Compare the end point with the next start point - if they match insert whitespace.
    ( o=  %%Abbutting tags - Abbutting tags - insert 2 blanks then later start and end points all need shifting by 2 chrs. rightwards.
      osozr-0 or i/  / obz$oc (f1/ to /-oidol2o+oo/%d/ f1/ chr /-oidol2o+oo/%d/)0 r-0or, ok)
    )0 %%Tag loop ends - move to next record.
  okm)0 
oz
  
%%If the text contains alphas in column 1 these could be mistaken for chapter marks - indent all nonblank lines now.
o#ono-om (q/a-zA-Z/\m)0 (m o#ono-om (rr-i/  /m, m)0, )
%%Break over-long lines - line length set by term width.
ob %q$=window; f/ screenwidth = /-oidol2o- osoz
oso#ono-omos 
%%Long-line search loop.
( (o#or f-1/ /-? bi/  /, m) )0 ok

:
%h'=call AddNewFunctions;

%g7
%%Follows all links in current document.
%%
%%Initializate document counter and return buffer key then get a list of all links.
ol0 ob %q*=tags;
%%Extract only link pathnames.
(f1/Type text from chr /f1/ = "/-e-0(f1/#/e0, f1/"/e)m, k)0
m-0 
( %%File loop
  %%Pick up the next pathname, if this file already exists in the text then skip it.
  n.r0a$& o#oz 
  ( %h=testkey '$; ok, 
    %%A new URL, set the new documents URL.
    o#ozoq/.=html2txt_CurrentURL/ z~r-0e0h$ 
    %%Escape any semicolons.
    z$r-0(f1/;/i/\/r)0
    %%Pull the file.
    z$oki/%e@=curl -L / 
    ( '$ 
      %%Add the chapter mark and new text to main buffer and translate.
      obmm-b2oq/.=html2txt_CurrentURL/z~r-0n.(f1/#/, r0)a$&osozok b-i/Chapter URL: ----------------------------------------------- /i'$
      oz m0onh@ono-om %h'=call html2txt_translate; o~, oz) )
  obz*m)0 oz
%m=Successfully added &'~& new documents.
:
  
%g6
%%Macro adds an index to all pages (pulled URLs) in the text.
ob %q@=tags;
(f1/  Type target /f1/#/\m,k)0
m-0(f1/, /-2e-0m)0
ozm-0 f/Chapter URL: -----/m-k-0 h@b2
m-0 (n.r0a$&r-0v'$ %b=addtag HTMLRef; %b=addtag -text='$; mrr-)0
:

%g#
ob 
( %q=windows; %r=WindowsNT_keys;
, %%Some sort of linux?
  %q@=version; mf1/ chrome / %r=curses_keys_chrome;
, %%Normal linux.
  %q$=env TERM; ki/%r=curses_keys_/ (f1/./s/_/)0 r0i/;/ '$ )
z@m-0 (z@f/{Button1Click}/ r-0r12e0z^m-0 (f'@r12e0, m-0i'@b-) i/%h'=call html2txt_FollowLink;/)?
ozm-0
:
'#
  
%%Now, at last, translate the document.
%h'=call html2txt_main; m-0
  
%s=mousemask 4;

